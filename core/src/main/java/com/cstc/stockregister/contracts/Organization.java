package com.cstc.stockregister.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Organization extends Contract {
    public static final String[] BINARY_ARRAY = {"","","ffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806119445750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515611985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197c906143b3565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fb47e016856040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004016119fc91906141e0565b602060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250611a4e9190810190613ba5565b9150611a6482600f612a1490919063ffffffff16565b92505050919050565b6000806000809054906101000a900460ff1660ff16141515611ac4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611abb906143d3565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611b6d5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515611bae576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba5906143b3565b60405180910390fd5b611bc48383600b612bcb9092919063ffffffff16565b905092915050565b6060611be2826003612dea90919063ffffffff16565b9050919050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611c935750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515611cd4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ccb90614413565b60405180910390fd5b611cea83836003612efd9092919063ffffffff16565b905092915050565b60008060009054906101000a900460ff1660ff16141515611d48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d3f906143d3565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611dda576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dd190614373565b60405180910390fd5b80600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6060611e2a600f6130fa565b905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480611ed95750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515611f1a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f1190614413565b60405180910390fd5b611f308383600361318c9092919063ffffffff16565b905092915050565b6000806000806000809054906101000a900460ff1660ff16141515611f92576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f89906143d3565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16148061203b5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561207c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612073906143b3565b60405180910390fd5b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169150600090505b835181101561228d578173ffffffffffffffffffffffffffffffffffffffff1663c8e40fbf85838151811015156120d957fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161211b91906141e0565b602060405180830381600087803b15801561213557600080fd5b505af1158015612149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061216d9190810190613ca4565b15156121ae576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016121a590614433565b60405180910390fd5b61227f8273ffffffffffffffffffffffffffffffffffffffff1663fb47e01686848151811015156121db57fe5b906020019060200201516040518263ffffffff167c010000000000000000000000000000000000000000000000000000000002815260040161221d91906141e0565b602060405180830381600087803b15801561223757600080fd5b505af115801561224b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525061226f9190810190613ba5565b600f6134e990919063ffffffff16565b5080806001019150506120a6565b612297600f613615565b92505050919050565b6000806000809054906101000a900460ff1660ff161415156122f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122ee906143d3565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806123a05750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b15156123e1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016123d8906143b3565b60405180910390fd5b6123f582600b61362690919063ffffffff16565b9050919050565b6000808460000160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015490506000811115612458576000915061258b565b828560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010190805190602001906124b0929190613710565b508460010180548091906001016124c79190613790565b9050600181018560000160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555083856001018281548110151561252757fe5b9060005260206000200160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460020160008154809291906001019190505550600191505b509392505050565b600081600201549050919050565b60008082840190508381101515156125ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016125e590614393565b60405180910390fd5b8091505092915050565b6000808360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001549050600081141561265457600091506127bb565b7ffac780c176150c8e1c66f7fcc3c6d4b281e261e2e08c26ae23375f55203534d032336040805190810160405280600681526020017f44454c4554450000000000000000000000000000000000000000000000000000815250868860000160008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001016040516127039594939291906141fb565b60405180910390a18360000160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008082016000905560018201600061276591906137bc565b50506001846001016001830381548110151561277d57fe5b9060005260206000200160000160146101000a81548160ff021916908315150217905550836002016000815480929190600190039190505550600191505b5092915050565b60008083600001836040518082805190602001908083835b6020831015156127ff57805182526020820191506020810190506020830392506127da565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001549050600081141561284a5760009150612a0d565b7f77da9cffaff6366f6be90a928ae84ae14a77d3138ce236f9481aa71d15a9c47c32336040805190810160405280600681526020017f44454c45544500000000000000000000000000000000000000000000000000008152508688600001886040","","010161389a565b5090565b90565b61391091905b8082111561390c57600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff0219169055506001016138bf565b5090565b90565b61395391905b8082111561394f576000808201600061393291906137bc565b6001820160006101000a81549060ff021916905550600201613919565b5090565b90565b61399691905b80821115613992576000808201600061397591906137bc565b6001820160006101000a81549060ff02191690555060020161395c565b5090565b90565b60006139a58235614629565b905092915050565b60006139b98251614629565b905092915050565b600082601f83011215156139d457600080fd5b81356139e76139e2826144d9565b6144ac565b91508181835260208401935060208101905083856020840282011115613a0c57600080fd5b60005b83811015613a3c5781613a228882613999565b845260208401935060208301925050600181019050613a0f565b5050505092915050565b600082601f8301121515613a5957600080fd5b8135613a6c613a6782614501565b6144ac565b9150818183526020840193506020810190508360005b83811015613ab25781358601613a988882613ad0565b845260208401935060208301925050600181019050613a82565b5050505092915050565b6000613ac88251614649565b905092915050565b600082601f8301121515613ae357600080fd5b8135613af6613af182614529565b6144ac565b91508082526020830160208301858383011115613b1257600080fd5b613b1d838284614655565b50505092915050565b600082601f8301121515613b3957600080fd5b8135613b4c613b4782614555565b6144ac565b91508082526020830160208301858383011115613b6857600080fd5b613b73838284614655565b50505092915050565b600060208284031215613b8e57600080fd5b6000613b9c84828501613999565b91505092915050565b600060208284031215613bb757600080fd5b6000613bc5848285016139ad565b91505092915050565b60008060408385031215613be157600080fd5b6000613bef85828601613999565b925050602083013567ffffffffffffffff811115613c0c57600080fd5b613c1885828601613b26565b9150509250929050565b600060208284031215613c3457600080fd5b600082013567ffffffffffffffff811115613c4e57600080fd5b613c5a848285016139c1565b91505092915050565b600060208284031215613c7557600080fd5b600082013567ffffffffffffffff811115613c8f57600080fd5b613c9b84828501613a46565b91505092915050565b600060208284031215613cb657600080fd5b6000613cc484828501613abc565b91505092915050565b600060208284031215613cdf57600080fd5b600082013567ffffffffffffffff811115613cf957600080fd5b613d0584828501613b26565b91505092915050565b60008060408385031215613d2157600080fd5b600083013567ffffffffffffffff811115613d3b57600080fd5b613d4785828601613b26565b9250506020613d5885828601613999565b9150509250929050565b60008060408385031215613d7557600080fd5b600083013567ffffffffffffffff811115613d8f57600080fd5b613d9b85828601613b26565b925050602083013567ffffffffffffffff811115613db857600080fd5b613dc485828601613b26565b9150509250929050565b613dd7816145f3565b82525050565b6000613de8826145ad565b808452602084019350613dfa83614581565b60005b82811015613e2c57613e10868351613dce565b613e19826145d9565b9150602086019550600181019050613dfd565b50849250505092915050565b6000613e43826145b8565b80845260208401935083602082028501613e5c8561458e565b60005b84811015613e95578383038852613e77838351613eeb565b9250613e82826145e6565b9150602088019750600181019050613e5f565b508196508694505050505092915050565b613eaf81614613565b82525050565b6000613ec0826145ce565b808452613ed4816020860160208601614664565b613edd81614697565b602085010191505092915050565b6000613ef6826145c3565b808452613f0a816020860160208601614664565b613f1381614697565b602085010191505092915050565b600081546001811660008114613f3e5760018114613f5e57613f9f565b607f600283041680865260ff198316602087015260408601935050613f9f565b60028204808652602086019550613f748561459b565b60005b82811015613f9657815481890152600182019150602081019050613f77565b80880195505050505b505092915050565b6000602782527f65787465726e616c4163636f756e74206973206e6f74206f70656e20616e206160208301527f63636f756e742e000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601c82527f6f6e6c7920676f7665726e6f7220697320617574686f72697a65642e000000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601b82527f6f6e6c792063726561746f7220697320617574686f72697a65642e00000000006020830152604082019050919050565b6000602082527f206f6e6c7920636f6e747261637420737461747573206973206e6f726d616c2e6020830152604082019050919050565b6000601d82527f416464726573735365743a204b65792063616e6e6f74206265203078300000006020830152604082019050919050565b6000602782527f6f6e6c7920676f7665726e6f72206f722063726561746f72206973206175746860208301527f6f72697a65642e000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602682527f6d616e6167657241646472657373206973206e6f74206f70656e20616e20616360208301527f636f756e742e00000000000000000000000000000000000000000000000000006040830152606082019050919050565b6141da8161461f565b82525050565b60006020820190506141f56000830184613dce565b92915050565b600060a0820190506142106000830188613dce565b61421d6020830187613dce565b818103604083015261422f8186613eeb565b905061423e6060830185613dce565b81810360808301526142508184613f21565b90509695505050505050565b600060a0820190506142716000830188613dce565b61427e6020830187613dce565b81810360408301526142908186613eeb565b905081810360608301526142a48185613eb5565b905081810360808301526142b88184613f21565b90509695505050505050565b600060208201905081810360008301526142de8184613ddd565b905092915050565b600060408201905081810360008301526143008185613e38565b905061430f6020830184613dce565b9392505050565b600060208201905061432b6000830184613ea6565b92915050565b6000602082019050818103600083015261434b8184613eb5565b905092915050565b6000602082019050818103600083015261436c81613fa7565b9050919050565b6000602082019050818103600083015261438c81614004565b9050919050565b600060208201905081810360008301526143ac8161403b565b9050919050565b600060208201905081810360008301526143cc81614072565b9050919050565b600060208201905081810360008301526143ec816140a9565b9050919050565b6000602082019050818103600083015261440c816140e0565b9050919050565b6000602082019050818103600083015261442c81614117565b9050919050565b6000602082019050818103600083015261444c81614174565b9050919050565b600060208201905061446860008301846141d1565b92915050565b600060608201905061448360008301866141d1565b81810360208301526144958185613e38565b90506144a460408301846141d1565b949350505050565b6000604051905081810181811067ffffffffffffffff821117156144cf57600080fd5b8060405250919050565b600067ffffffffffffffff8211156144f057600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561451857600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561454057600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561456c57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b82818337600083830152505050565b60005b83811015614682578082015181840152602081019050614667565b83811115614691576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582047a3015d1ebe7222fb58f9e2834d288be95046d8351917eb79c5299b97d409ee6c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","","","","01613899565b5090565b90565b6138f891905b808211156138f457600080820160006138d791906137ed565b6001820160006101000a81549060ff0219169055506002016138be565b5090565b90565b61393b91905b80821115613937576000808201600061391a91906137ed565b6001820160006101000a81549060ff021916905550600201613901565b5090565b90565b61399591905b8082111561399157600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff021916905550600101613944565b5090565b90565b60006139a48235614628565b905092915050565b60006139b88251614628565b905092915050565b600082601f83011215156139d357600080fd5b81356139e66139e1826144d8565b6144ab565b91508181835260208401935060208101905083856020840282011115613a0b57600080fd5b60005b83811015613a3b5781613a218882613998565b845260208401935060208301925050600181019050613a0e565b5050505092915050565b600082601f8301121515613a5857600080fd5b8135613a6b613a6682614500565b6144ab565b9150818183526020840193506020810190508360005b83811015613ab15781358601613a978882613acf565b845260208401935060208301925050600181019050613a81565b5050505092915050565b6000613ac78251614648565b905092915050565b600082601f8301121515613ae257600080fd5b8135613af5613af082614528565b6144ab565b91508082526020830160208301858383011115613b1157600080fd5b613b1c838284614654565b50505092915050565b600082601f8301121515613b3857600080fd5b8135613b4b613b4682614554565b6144ab565b91508082526020830160208301858383011115613b6757600080fd5b613b72838284614654565b50505092915050565b600060208284031215613b8d57600080fd5b6000613b9b84828501613998565b91505092915050565b600060208284031215613bb657600080fd5b6000613bc4848285016139ac565b91505092915050565b60008060408385031215613be057600080fd5b6000613bee85828601613998565b925050602083013567ffffffffffffffff811115613c0b57600080fd5b613c1785828601613b25565b9150509250929050565b600060208284031215613c3357600080fd5b600082013567ffffffffffffffff811115613c4d57600080fd5b613c59848285016139c0565b91505092915050565b600060208284031215613c7457600080fd5b600082013567ffffffffffffffff811115613c8e57600080fd5b613c9a84828501613a45565b91505092915050565b600060208284031215613cb557600080fd5b6000613cc384828501613abb565b91505092915050565b600060208284031215613cde57600080fd5b600082013567ffffffffffffffff811115613cf857600080fd5b613d0484828501613b25565b91505092915050565b60008060408385031215613d2057600080fd5b600083013567ffffffffffffffff811115613d3a57600080fd5b613d4685828601613b25565b9250506020613d5785828601613998565b9150509250929050565b60008060408385031215613d7457600080fd5b600083013567ffffffffffffffff811115613d8e57600080fd5b613d9a85828601613b25565b925050602083013567ffffffffffffffff811115613db757600080fd5b613dc385828601613b25565b9150509250929050565b613dd6816145f2565b82525050565b6000613de7826145ac565b808452602084019350613df983614580565b60005b82811015613e2b57613e0f868351613dcd565b613e18826145d8565b9150602086019550600181019050613dfc565b50849250505092915050565b6000613e42826145b7565b80845260208401935083602082028501613e5b8561458d565b60005b84811015613e94578383038852613e76838351613eea565b9250613e81826145e5565b9150602088019750600181019050613e5e565b508196508694505050505092915050565b613eae81614612565b82525050565b6000613ebf826145cd565b808452613ed3816020860160208601614663565b613edc81614696565b602085010191505092915050565b6000613ef5826145c2565b808452613f09816020860160208601614663565b613f1281614696565b602085010191505092915050565b600081546001811660008114613f3d5760018114613f5d57613f9e565b607f600283041680865260ff198316602087015260408601935050613f9e565b60028204808652602086019550613f738561459a565b60005b82811015613f9557815481890152600182019150602081019050613f76565b80880195505050505b505092915050565b6000601b82527f6f6e6c792063726561746f7220697320617574686f72697a65642e00000000006020830152604082019050919050565b6000601d82527f416464726573735365743a204b65792063616e6e6f74206265203078300000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000602082527f206f6e6c7920636f6e747261637420737461747573206973206e6f726d616c2e6020830152604082019050919050565b6000601c82527f6f6e6c7920676f7665726e6f7220697320617574686f72697a65642e000000006020830152604082019050919050565b6000602682527f6d616e6167657241646472657373206973206e6f74206f70656e20616e20616360208301527f636f756e742e00000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602782527f6f6e6c7920676f7665726e6f72206f722063726561746f72206973206175746860208301527f6f72697a65642e000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602782527f65787465726e616c4163636f756e74206973206e6f74206f70656e20616e206160208301527f63636f756e742e000000000000000000000000000000000000000000000000006040830152606082019050919050565b6141d98161461e565b82525050565b60006020820190506141f46000830184613dcd565b92915050565b600060a08201905061420f6000830188613dcd565b61421c6020830187613dcd565b818103604083015261422e8186613eea565b905061423d6060830185613dcd565b818103608083015261424f8184613f20565b90509695505050505050565b600060a0820190506142706000830188613dcd565b61427d6020830187613dcd565b818103604083015261428f8186613eea565b905081810360608301526142a38185613eb4565b905081810360808301526142b78184613f20565b90509695505050505050565b600060208201905081810360008301526142dd8184613ddc565b905092915050565b600060408201905081810360008301526142ff8185613e37565b905061430e6020830184613dcd565b9392505050565b600060208201905061432a6000830184613ea5565b92915050565b6000602082019050818103600083015261434a8184613eb4565b905092915050565b6000602082019050818103600083015261436b81613fa6565b9050919050565b6000602082019050818103600083015261438b81613fdd565b9050919050565b600060208201905081810360008301526143ab81614014565b9050919050565b600060208201905081810360008301526143cb8161404b565b9050919050565b600060208201905081810360008301526143eb81614082565b9050919050565b6000602082019050818103600083015261440b816140b9565b9050919050565b6000602082019050818103600083015261442b81614116565b9050919050565b6000602082019050818103600083015261444b81614173565b9050919050565b600060208201905061446760008301846141d0565b92915050565b600060608201905061448260008301866141d0565b81810360208301526144948185613e37565b90506144a360408301846141d0565b949350505050565b6000604051905081810181811067ffffffffffffffff821117156144ce57600080fd5b8060405250919050565b600067ffffffffffffffff8211156144ef57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561451757600080fd5b602082029050602081019050919050565b600067ffffffffffffffff82111561453f57600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561456b57600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b82818337600083830152505050565b60005b83811015614681578082015181840152602081019050614666565b83811115614690576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820baa4f5649e7df3b528fc897ec4ee648308aa87545e3a6cec125818da2555d4fa6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminAccount\",\"type\":\"address\"},{\"name\":\"desc\",\"type\":\"bytes\"}],\"name\":\"setOrgAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sizeOfStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOrgInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes[]\"},{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovernor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"orgInfoStr\",\"type\":\"bytes[]\"}],\"name\":\"updateOrgInfo\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"adminAccount\",\"type\":\"address\"}],\"name\":\"removeOrgAdmin\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_stockAsset\",\"type\":\"address\"}],\"name\":\"setStockAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getLastBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"removeValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managerAddress\",\"type\":\"address\"}],\"name\":\"deleteManager\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bondAssetCode\",\"type\":\"bytes\"},{\"name\":\"bondAssetAddress\",\"type\":\"address\"}],\"name\":\"setBondAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"setKeyValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getManager\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"insertKeyValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"managers\",\"type\":\"address[]\"}],\"name\":\"addManager\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bondAssetCode\",\"type\":\"bytes\"}],\"name\":\"getBondAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_accountManager\",\"type\":\"address\"},{\"name\":\"orgInfoStr\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"number\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"orgInfoStr\",\"type\":\"bytes[]\"},{\"indexed\":false,\"name\":\"previousBlock\",\"type\":\"uint256\"}],\"name\":\"UpdateOrgInfoRecord\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETCREATOR = "getCreator";

    public static final String FUNC_STOPCONTRACT = "stopContract";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_RESTARTCONTRACT = "restartContract";

    public static final String FUNC_SETORGADMIN = "setOrgAdmin";

    public static final String FUNC_SIZEOFSTORAGE = "sizeOfStorage";

    public static final String FUNC_SETCREATOR = "setCreator";

    public static final String FUNC_GETORGINFO = "getOrgInfo";

    public static final String FUNC_GETGOVERNOR = "getGovernor";

    public static final String FUNC_UPDATEORGINFO = "updateOrgInfo";

    public static final String FUNC_REMOVEORGADMIN = "removeOrgAdmin";

    public static final String FUNC_SETSTOCKASSET = "setStockAsset";

    public static final String FUNC_GETLASTBLOCK = "getLastBlock";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_REMOVEVALUE = "removeValue";

    public static final String FUNC_DELETEMANAGER = "deleteManager";

    public static final String FUNC_SETBONDASSET = "setBondAsset";

    public static final String FUNC_GETVALUE = "getValue";

    public static final String FUNC_SETKEYVALUE = "setKeyValue";

    public static final String FUNC_SETGOVERNOR = "setGovernor";

    public static final String FUNC_GETMANAGER = "getManager";

    public static final String FUNC_INSERTKEYVALUE = "insertKeyValue";

    public static final String FUNC_ADDMANAGER = "addManager";

    public static final String FUNC_GETBONDASSET = "getBondAsset";

    public static final Event UPDATEORGINFORECORD_EVENT = new Event("UpdateOrgInfoRecord", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<Uint256>() {}));
    ;

    protected Organization(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String getCreator() throws ContractException {
        final Function function = new Function(FUNC_GETCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt stopContract() {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void stopContract(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStopContract() {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getStopContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt restartContract() {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void restartContract(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRestartContract() {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getRestartContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setOrgAdmin(String adminAccount, byte[] desc) {
        final Function function = new Function(
                FUNC_SETORGADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(desc)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOrgAdmin(String adminAccount, byte[] desc, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETORGADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(desc)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOrgAdmin(String adminAccount, byte[] desc) {
        final Function function = new Function(
                FUNC_SETORGADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(desc)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, byte[]> getSetOrgAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETORGADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, byte[]>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getSetOrgAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETORGADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger sizeOfStorage() throws ContractException {
        final Function function = new Function(FUNC_SIZEOFSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setCreator(String _creator) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setCreator(String _creator, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetCreator(String _creator) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetCreatorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple2<List<byte[]>, String> getOrgInfo() throws ContractException {
        final Function function = new Function(FUNC_GETORGINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}, new TypeReference<Address>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<List<byte[]>, String>(
                convertToNative((List<DynamicBytes>) results.get(0).getValue()), 
                (String) results.get(1).getValue());
    }

    public String getGovernor() throws ContractException {
        final Function function = new Function(FUNC_GETGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt updateOrgInfo(List<byte[]> orgInfoStr) {
        final Function function = new Function(
                FUNC_UPDATEORGINFO, 
                Arrays.<Type>asList(orgInfoStr.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(orgInfoStr, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateOrgInfo(List<byte[]> orgInfoStr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEORGINFO, 
                Arrays.<Type>asList(orgInfoStr.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(orgInfoStr, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateOrgInfo(List<byte[]> orgInfoStr) {
        final Function function = new Function(
                FUNC_UPDATEORGINFO, 
                Arrays.<Type>asList(orgInfoStr.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(orgInfoStr, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<byte[]>> getUpdateOrgInfoInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEORGINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<byte[]>>(

                convertToNative((List<DynamicBytes>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getUpdateOrgInfoOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEORGINFO, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt removeOrgAdmin(String adminAccount) {
        final Function function = new Function(
                FUNC_REMOVEORGADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeOrgAdmin(String adminAccount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEORGADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAccount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveOrgAdmin(String adminAccount) {
        final Function function = new Function(
                FUNC_REMOVEORGADMIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(adminAccount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveOrgAdminInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEORGADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveOrgAdminOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEORGADMIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setStockAsset(String _stockAsset) {
        final Function function = new Function(
                FUNC_SETSTOCKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_stockAsset)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setStockAsset(String _stockAsset, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETSTOCKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_stockAsset)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetStockAsset(String _stockAsset) {
        final Function function = new Function(
                FUNC_SETSTOCKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_stockAsset)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetStockAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETSTOCKASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getSetStockAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETSTOCKASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger getLastBlock() throws ContractException {
        final Function function = new Function(FUNC_GETLASTBLOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt removeValue(byte[] key) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeValue(byte[] key, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveValue(byte[] key) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getRemoveValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt deleteManager(String managerAddress) {
        final Function function = new Function(
                FUNC_DELETEMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(managerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void deleteManager(String managerAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_DELETEMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(managerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForDeleteManager(String managerAddress) {
        final Function function = new Function(
                FUNC_DELETEMANAGER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(managerAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getDeleteManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_DELETEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getDeleteManagerOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_DELETEMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setBondAsset(byte[] bondAssetCode, String bondAssetAddress) {
        final Function function = new Function(
                FUNC_SETBONDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(bondAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(bondAssetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBondAsset(byte[] bondAssetCode, String bondAssetAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBONDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(bondAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(bondAssetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBondAsset(byte[] bondAssetCode, String bondAssetAddress) {
        final Function function = new Function(
                FUNC_SETBONDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(bondAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(bondAssetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], String> getSetBondAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBONDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(

                (byte[]) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getSetBondAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETBONDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public byte[] getValue(byte[] key) throws ContractException {
        final Function function = new Function(FUNC_GETVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt setKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setKeyValue(byte[] key, byte[] value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getSetKeyValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getSetKeyValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setGovernor(String _governor) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setGovernor(String _governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetGovernor(String _governor) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public List getManager() throws ContractException {
        final Function function = new Function(FUNC_GETMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt insertKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertKeyValue(byte[] key, byte[] value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getInsertKeyValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getInsertKeyValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addManager(List<String> managers) {
        final Function function = new Function(
                FUNC_ADDMANAGER, 
                Arrays.<Type>asList(managers.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(managers, org.fisco.bcos.sdk.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addManager(List<String> managers, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDMANAGER, 
                Arrays.<Type>asList(managers.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(managers, org.fisco.bcos.sdk.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddManager(List<String> managers) {
        final Function function = new Function(
                FUNC_ADDMANAGER, 
                Arrays.<Type>asList(managers.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("address[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Address>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(managers, org.fisco.bcos.sdk.abi.datatypes.Address.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getAddManagerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Address>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getAddManagerOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDMANAGER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getBondAsset(byte[] bondAssetCode) throws ContractException {
        final Function function = new Function(FUNC_GETBONDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(bondAssetCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public List<UpdateOrgInfoRecordEventResponse> getUpdateOrgInfoRecordEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATEORGINFORECORD_EVENT, transactionReceipt);
        ArrayList<UpdateOrgInfoRecordEventResponse> responses = new ArrayList<UpdateOrgInfoRecordEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateOrgInfoRecordEventResponse typedResponse = new UpdateOrgInfoRecordEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.number = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.orgInfoStr = (List<DynamicBytes>) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.previousBlock = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateOrgInfoRecordEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEORGINFORECORD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateOrgInfoRecordEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATEORGINFORECORD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static Organization load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Organization(contractAddress, client, credential);
    }

    public static Organization deploy(Client client, CryptoKeyPair credential, String _owner, String _accountManager, List<byte[]> orgInfoStr) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_accountManager), 
                orgInfoStr.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(orgInfoStr, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class))));
        return deploy(Organization.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class UpdateOrgInfoRecordEventResponse {
        public TransactionReceipt.Logs log;

        public BigInteger number;

        public List<DynamicBytes> orgInfoStr;

        public BigInteger previousBlock;
    }
}
