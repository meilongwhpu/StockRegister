package com.cstc.stockregister.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class Identity extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405260008060006101000a81548160ff021916908360ff1602179055503480156200002c57600080fd5b5060405160608062001d9a83398101806040526200004e919081019062000130565b82600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001a6565b600062000128825162000186565b905092915050565b6000806000606084860312156200014657600080fd5b600062000156868287016200011a565b935050602062000169868287016200011a565b92505060406200017c868287016200011a565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b611be480620001b66000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff1680630ee2cb10146100ca57806312253a6c146100f557806313af40351461012057806330a52d5b146101495780633e87b90f146101745780633f5160181461019f5780634fc07d75146101c8578063893d20e8146101f357806395f611ef1461021e578063b6576bdf1461025b578063c2d5f23c14610298578063c42cf535146102d5578063d9efc63e146102fe575b600080fd5b3480156100d657600080fd5b506100df61033b565b6040516100ec9190611945565b60405180910390f35b34801561010157600080fd5b5061010a610365565b60405161011791906119c8565b60405180910390f35b34801561012c57600080fd5b5061014760048036036101429190810190611685565b61041a565b005b34801561015557600080fd5b5061015e610546565b60405161016b91906119c8565b60405180910390f35b34801561018057600080fd5b506101896105fb565b6040516101969190611a65565b60405180910390f35b3480156101ab57600080fd5b506101c660048036036101c19190810190611685565b61060c565b005b3480156101d457600080fd5b506101dd610738565b6040516101ea9190611945565b60405180910390f35b3480156101ff57600080fd5b50610208610761565b6040516102159190611945565b60405180910390f35b34801561022a57600080fd5b50610245600480360361024091908101906116ae565b61078b565b60405161025291906119c8565b60405180910390f35b34801561026757600080fd5b50610282600480360361027d91908101906116ae565b610891565b60405161028f91906119e3565b60405180910390f35b3480156102a457600080fd5b506102bf60048036036102ba91908101906116ef565b6108ae565b6040516102cc91906119c8565b60405180910390f35b3480156102e157600080fd5b506102fc60048036036102f79190810190611685565b6109b7565b005b34801561030a57600080fd5b50610325600480360361032091908101906116ef565b610ae3565b60405161033291906119c8565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156103f8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ef90611a05565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055506001905090565b60008060009054906101000a900460ff1660ff16141515610470576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046790611a25565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610502576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f990611a05565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156105d9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d090611a05565b60405180910390fd5b60008060006101000a81548160ff021916908360ff1602179055506001905090565b60006106076003610bec565b905090565b60008060009054906101000a900460ff1660ff16141515610662576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065990611a25565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106eb90611a05565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108355750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515610876576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161086d90611a45565b60405180910390fd5b61088a826003610bfa90919063ffffffff16565b9050919050565b60606108a7826003610e4c90919063ffffffff16565b9050919050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109585750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515610999576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161099090611a45565b60405180910390fd5b6109af83836003610f5f9092919063ffffffff16565b905092915050565b60008060009054906101000a900460ff1660ff16141515610a0d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0490611a25565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9690611a05565b60405180910390fd5b80600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161480610b8d5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515610bce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc590611a45565b60405180910390fd5b610be48383600361115c9092919063ffffffff16565b905092915050565b600081600201549050919050565b60008083600001836040518082805190602001908083835b602083101515610c375780518252602082019150602081019050602083039250610c12565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000015490506000811415610c825760009150610e45565b7f77da9cffaff6366f6be90a928ae84ae14a77d3138ce236f9481aa71d15a9c47c32336040805190810160405280600681526020017f44454c45544500000000000000000000000000000000000000000000000000008152508688600001886040518082805190602001908083835b602083101515610d165780518252602082019150602081019050602083039250610cf1565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101604051610d5d959493929190611960565b60405180910390a183600001836040518082805190602001908083835b602083101515610d9f5780518252602082019150602081019050602083039250610d7a565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600080820160009055600182016000610deb91906114b9565b505060018460010160018303815481101515610e0357fe5b906000526020600020906002020160010160006101000a81548160ff021916908315150217905550836002016000815480929190600190039190505550600191505b50929150","50565b606082600001826040518082805190602001908083835b602083101515610e885780518252602082019150602081019050602083039250610e63565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610f525780601f10610f2757610100808354040283529160200191610f52565b820191906000526020600020905b815481529060010190602001808311610f3557829003601f168201915b5050505050905092915050565b60008084600001846040518082805190602001908083835b602083101515610f9c5780518252602082019150602081019050602083039250610f77565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001549050600081111561114f577f77da9cffaff6366f6be90a928ae84ae14a77d3138ce236f9481aa71d15a9c47c32336040805190810160405280600681526020017f4d4f4449465900000000000000000000000000000000000000000000000000008152508789600001896040518082805190602001908083835b602083101515611072578051825260208201915060208101905060208303925061104d565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040516110b9959493929190611960565b60405180910390a18285600001856040518082805190602001908083835b6020831015156110fc57805182526020820191506020810190506020830392506110d7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190611145929190611501565b5060019150611154565b600091505b509392505050565b60008084600001846040518082805190602001908083835b6020831015156111995780518252602082019150602081019050602083039250611174565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001549050600081111561134c577f77da9cffaff6366f6be90a928ae84ae14a77d3138ce236f9481aa71d15a9c47c32336040805190810160405280600681526020017f4d4f4449465900000000000000000000000000000000000000000000000000008152508789600001896040518082805190602001908083835b60208310151561126f578051825260208201915060208101905060208303925061124a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040516112b6959493929190611960565b60405180910390a18285600001856040518082805190602001908083835b6020831015156112f957805182526020820191506020810190506020830392506112d4565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190611342929190611501565b50600191506114b1565b8285600001856040518082805190602001908083835b6020831015156113875780518252602082019150602081019050602083039250611362565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010190805190602001906113d0929190611501565b508460010180548091906001016113e79190611581565b90506001810185600001856040518082805190602001908083835b6020831015156114275780518252602082019150602081019050602083039250611402565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018190555083856001018281548110151561147357fe5b90600052602060002090600202016000019080519060200190611497929190611501565b508460020160008154809291906001019190505550600091505b509392505050565b50805460018160011615610100020316600290046000825580601f106114df57506114fe565b601f0160209004906000526020600020908101906114fd91906115b3565b5b50565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061154257805160ff1916838001178555611570565b82800160010185558215611570579182015b8281111561156f578251825591602001919060010190611554565b5b50905061157d91906115b3565b5090565b8154818355818111156115ae576002028160020283600052602060002091820191016115ad91906115d8565b5b505050565b6115d591905b808211156115d15760008160009055506001016115b9565b5090565b90565b61161891905b8082111561161457600080820160006115f791906114b9565b6001820160006101000a81549060ff0219169055506002016115de565b5090565b90565b60006116278235611b37565b905092915050565b600082601f830112151561164257600080fd5b813561165561165082611aad565b611a80565b9150808252602083016020830185838301111561167157600080fd5b61167c838284611b57565b50505092915050565b60006020828403121561169757600080fd5b60006116a58482850161161b565b91505092915050565b6000602082840312156116c057600080fd5b600082013567ffffffffffffffff8111156116da57600080fd5b6116e68482850161162f565b91505092915050565b6000806040838503121561170257600080fd5b600083013567ffffffffffffffff81111561171c57600080fd5b6117288582860161162f565b925050602083013567ffffffffffffffff81111561174557600080fd5b6117518582860161162f565b9150509250929050565b61176481611b01565b82525050565b61177381611b21565b82525050565b600061178482611af6565b808452611798816020860160208601611b66565b6117a181611b99565b602085010191505092915050565b60006117ba82611aeb565b8084526117ce816020860160208601611b66565b6117d781611b99565b602085010191505092915050565b600081546001811660008114611802576001811461182257611863565b607f600283041680865260ff198316602087015260408601935050611863565b6002820480865260208601955061183885611ad9565b60005b8281101561185a5781548189015260018201915060208101905061183b565b80880195505050505b505092915050565b6000601c82527f6f6e6c7920676f7665726e6f7220697320617574686f72697a65642e000000006020830152604082019050919050565b6000602082527f206f6e6c7920636f6e747261637420737461747573206973206e6f726d616c2e6020830152604082019050919050565b6000602782527f6f6e6c7920676f7665726e6f72206f722063726561746f72206973206175746860208301527f6f72697a65642e000000000000000000000000000000000000000000000000006040830152606082019050919050565b61193f81611b2d565b82525050565b600060208201905061195a600083018461175b565b92915050565b600060a082019050611975600083018861175b565b611982602083018761175b565b818103604083015261199481866117af565b905081810360608301526119a88185611779565b905081810360808301526119bc81846117e5565b90509695505050505050565b60006020820190506119dd600083018461176a565b92915050565b600060208201905081810360008301526119fd8184611779565b905092915050565b60006020820190508181036000830152611a1e8161186b565b9050919050565b60006020820190508181036000830152611a3e816118a2565b9050919050565b60006020820190508181036000830152611a5e816118d9565b9050919050565b6000602082019050611a7a6000830184611936565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611aa357600080fd5b8060405250919050565b600067ffffffffffffffff821115611ac457600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015611b84578082015181840152602081019050611b69565b83811115611b93576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a723058209b6ac155e9f15fcdc87d3770069938bf04e064cc181e79d501cbe95c92e8ad176c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"608060405260008060006101000a81548160ff021916908360ff1602179055503480156200002c57600080fd5b5060405160608062001d9a83398101806040526200004e919081019062000130565b82600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620001a6565b600062000128825162000186565b905092915050565b6000806000606084860312156200014657600080fd5b600062000156868287016200011a565b935050602062000169868287016200011a565b92505060406200017c868287016200011a565b9150509250925092565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b611be480620001b66000396000f3006080604052600436106100c5576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301b5bdd2146100ca57806305282c70146100f3578063081a99c11461011c5780630f7160511461014757806379e6d96f146101725780638a5d8d131461019d5780638feb556c146101da5780639096d499146102055780639939189714610242578063a15ebc381461027f578063a2609414146102bc578063c624d534146102e5578063ce913ce014610310575b600080fd5b3480156100d657600080fd5b506100f160048036036100ec9190810190611685565b61033b565b005b3480156100ff57600080fd5b5061011a60048036036101159190810190611685565b610467565b005b34801561012857600080fd5b50610131610593565b60405161013e91906119c8565b60405180910390f35b34801561015357600080fd5b5061015c610648565b60405161016991906119c8565b60405180910390f35b34801561017e57600080fd5b506101876106fd565b6040516101949190611945565b60405180910390f35b3480156101a957600080fd5b506101c460048036036101bf91908101906116ef565b610727565b6040516101d191906119c8565b60405180910390f35b3480156101e657600080fd5b506101ef610830565b6040516101fc9190611a65565b60405180910390f35b34801561021157600080fd5b5061022c600480360361022791908101906116ae565b610841565b60405161023991906119c8565b60405180910390f35b34801561024e57600080fd5b50610269600480360361026491908101906116ef565b610947565b60405161027691906119c8565b60405180910390f35b34801561028b57600080fd5b506102a660048036036102a191908101906116ae565b610a50565b6040516102b391906119e3565b60405180910390f35b3480156102c857600080fd5b506102e360048036036102de9190810190611685565b610a6d565b005b3480156102f157600080fd5b506102fa610b99565b6040516103079190611945565b60405180910390f35b34801561031c57600080fd5b50610325610bc3565b6040516103329190611945565b60405180910390f35b60008060009054906101000a900460ff1660ff16141515610391576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161038890611a05565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610423576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161041a90611a25565b60405180910390fd5b80600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900460ff1660ff161415156104bd576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016104b490611a05565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561054f576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161054690611a25565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610626576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161061d90611a25565b60405180910390fd5b60016000806101000a81548160ff021916908360ff1602179055506001905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156106db576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016106d290611a25565b60405180910390fd5b60008060006101000a81548160ff021916908360ff1602179055506001905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806107d15750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515610812576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161080990611a45565b60405180910390fd5b61082883836003610bec9092919063ffffffff16565b905092915050565b600061083c6003610de9565b905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806108eb5750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b151561092c576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161092390611a45565b60405180910390fd5b610940826003610df790919063ffffffff16565b9050919050565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614806109f15750600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16145b1515610a32576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610a2990611a45565b60405180910390fd5b610a48838360036110499092919063ffffffff16565b905092915050565b6060610a668260036113a690919063ffffffff16565b9050919050565b60008060009054906101000a900460ff1660ff16141515610ac3576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610aba90611a05565b60405180910390fd5b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610b55576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610b4c90611a25565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008084600001846040518082805190602001908083835b602083101515610c295780518252602082019150602081019050602083039250610c04565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000015490506000811115610ddc577fb842e70165ea1827273bc7a4271b485c64a747bd35bd7b804c41256bf4d5ecf132336040805190810160405280600681526020017f4d4f4449465900000000000000000000000000000000000000000000000000008152508789600001896040518082805190602001908083835b602083101515610cff5780518252602082019150602081019050602083039250610cda565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101604051610d46959493929190611960565b60405180910390a18285600001856040518082805190602001908083835b602083101515610d895780518252602082019150602081019050602083039250610d64565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190610dd29291906114b9565b5060019150610de1565b600091505b509392505050565b600081600201549050919050565b60008083600001836040518082805190602001908083835b602083101515610e345780518252602082019150602081019050602083039250610e0f565b6001836020036101000a0380198251168184511680","8217855250505050505090500191505090815260200160405180910390206000015490506000811415610e7f5760009150611042565b7fb842e70165ea1827273bc7a4271b485c64a747bd35bd7b804c41256bf4d5ecf132336040805190810160405280600681526020017f44454c45544500000000000000000000000000000000000000000000000000008152508688600001886040518082805190602001908083835b602083101515610f135780518252602082019150602081019050602083039250610eee565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101604051610f5a959493929190611960565b60405180910390a183600001836040518082805190602001908083835b602083101515610f9c5780518252602082019150602081019050602083039250610f77565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600080820160009055600182016000610fe89190611539565b50506001846001016001830381548110151561100057fe5b906000526020600020906002020160010160006101000a81548160ff021916908315150217905550836002016000815480929190600190039190505550600191505b5092915050565b60008084600001846040518082805190602001908083835b6020831015156110865780518252602082019150602081019050602083039250611061565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000015490506000811115611239577fb842e70165ea1827273bc7a4271b485c64a747bd35bd7b804c41256bf4d5ecf132336040805190810160405280600681526020017f4d4f4449465900000000000000000000000000000000000000000000000000008152508789600001896040518082805190602001908083835b60208310151561115c5780518252602082019150602081019050602083039250611137565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040516111a3959493929190611960565b60405180910390a18285600001856040518082805190602001908083835b6020831015156111e657805182526020820191506020810190506020830392506111c1565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600101908051906020019061122f9291906114b9565b506001915061139e565b8285600001856040518082805190602001908083835b602083101515611274578051825260208201915060208101905060208303925061124f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010190805190602001906112bd9291906114b9565b508460010180548091906001016112d49190611581565b90506001810185600001856040518082805190602001908083835b60208310151561131457805182526020820191506020810190506020830392506112ef565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018190555083856001018281548110151561136057fe5b906000526020600020906002020160000190805190602001906113849291906114b9565b508460020160008154809291906001019190505550600091505b509392505050565b606082600001826040518082805190602001908083835b6020831015156113e257805182526020820191506020810190506020830392506113bd565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156114ac5780601f10611481576101008083540402835291602001916114ac565b820191906000526020600020905b81548152906001019060200180831161148f57829003601f168201915b5050505050905092915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106114fa57805160ff1916838001178555611528565b82800160010185558215611528579182015b8281111561152757825182559160200191906001019061150c565b5b50905061153591906115b3565b5090565b50805460018160011615610100020316600290046000825580601f1061155f575061157e565b601f01602090049060005260206000209081019061157d91906115b3565b5b50565b8154818355818111156115ae576002028160020283600052602060002091820191016115ad91906115d8565b5b505050565b6115d591905b808211156115d15760008160009055506001016115b9565b5090565b90565b61161891905b8082111561161457600080820160006115f79190611539565b6001820160006101000a81549060ff0219169055506002016115de565b5090565b90565b60006116278235611b37565b905092915050565b600082601f830112151561164257600080fd5b813561165561165082611aad565b611a80565b9150808252602083016020830185838301111561167157600080fd5b61167c838284611b57565b50505092915050565b60006020828403121561169757600080fd5b60006116a58482850161161b565b91505092915050565b6000602082840312156116c057600080fd5b600082013567ffffffffffffffff8111156116da57600080fd5b6116e68482850161162f565b91505092915050565b6000806040838503121561170257600080fd5b600083013567ffffffffffffffff81111561171c57600080fd5b6117288582860161162f565b925050602083013567ffffffffffffffff81111561174557600080fd5b6117518582860161162f565b9150509250929050565b61176481611b01565b82525050565b61177381611b21565b82525050565b600061178482611af6565b808452611798816020860160208601611b66565b6117a181611b99565b602085010191505092915050565b60006117ba82611aeb565b8084526117ce816020860160208601611b66565b6117d781611b99565b602085010191505092915050565b600081546001811660008114611802576001811461182257611863565b607f600283041680865260ff198316602087015260408601935050611863565b6002820480865260208601955061183885611ad9565b60005b8281101561185a5781548189015260018201915060208101905061183b565b80880195505050505b505092915050565b6000602082527f206f6e6c7920636f6e747261637420737461747573206973206e6f726d616c2e6020830152604082019050919050565b6000601c82527f6f6e6c7920676f7665726e6f7220697320617574686f72697a65642e000000006020830152604082019050919050565b6000602782527f6f6e6c7920676f7665726e6f72206f722063726561746f72206973206175746860208301527f6f72697a65642e000000000000000000000000000000000000000000000000006040830152606082019050919050565b61193f81611b2d565b82525050565b600060208201905061195a600083018461175b565b92915050565b600060a082019050611975600083018861175b565b611982602083018761175b565b818103604083015261199481866117af565b905081810360608301526119a88185611779565b905081810360808301526119bc81846117e5565b90509695505050505050565b60006020820190506119dd600083018461176a565b92915050565b600060208201905081810360008301526119fd8184611779565b905092915050565b60006020820190508181036000830152611a1e8161186b565b9050919050565b60006020820190508181036000830152611a3e816118a2565b9050919050565b60006020820190508181036000830152611a5e816118d9565b9050919050565b6000602082019050611a7a6000830184611936565b92915050565b6000604051905081810181811067ffffffffffffffff82111715611aa357600080fd5b8060405250919050565b600067ffffffffffffffff821115611ac457600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015611b84578082015181840152602081019050611b69565b83811115611b93576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820246d801a6a6d9dcdd80291b0cce96b69bbd0b3d7ccf5a93bdd12cf1f1e2533036c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sizeOfStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovernor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"removeValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"setKeyValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"insertKeyValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_governor\",\"type\":\"address\"},{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETCREATOR = "getCreator";

    public static final String FUNC_STOPCONTRACT = "stopContract";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_RESTARTCONTRACT = "restartContract";

    public static final String FUNC_SIZEOFSTORAGE = "sizeOfStorage";

    public static final String FUNC_SETCREATOR = "setCreator";

    public static final String FUNC_GETGOVERNOR = "getGovernor";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_REMOVEVALUE = "removeValue";

    public static final String FUNC_GETVALUE = "getValue";

    public static final String FUNC_SETKEYVALUE = "setKeyValue";

    public static final String FUNC_SETGOVERNOR = "setGovernor";

    public static final String FUNC_INSERTKEYVALUE = "insertKeyValue";

    protected Identity(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String getCreator() throws ContractException {
        final Function function = new Function(FUNC_GETCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt stopContract() {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void stopContract(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStopContract() {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getStopContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt restartContract() {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void restartContract(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRestartContract() {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getRestartContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger sizeOfStorage() throws ContractException {
        final Function function = new Function(FUNC_SIZEOFSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setCreator(String _creator) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setCreator(String _creator, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetCreator(String _creator) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetCreatorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getGovernor() throws ContractException {
        final Function function = new Function(FUNC_GETGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt removeValue(byte[] key) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeValue(byte[] key, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveValue(byte[] key) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getRemoveValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public byte[] getValue(byte[] key) throws ContractException {
        final Function function = new Function(FUNC_GETVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt setKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setKeyValue(byte[] key, byte[] value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getSetKeyValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getSetKeyValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setGovernor(String _governor) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setGovernor(String _governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetGovernor(String _governor) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt insertKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertKeyValue(byte[] key, byte[] value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getInsertKeyValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getInsertKeyValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public static Identity load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new Identity(contractAddress, client, credential);
    }

    public static Identity deploy(Client client, CryptoKeyPair credential, String _governor, String _creator, String _owner) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_creator), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)));
        return deploy(Identity.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }
}
