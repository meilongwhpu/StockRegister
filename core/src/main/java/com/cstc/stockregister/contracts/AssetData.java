package com.cstc.stockregister.contracts;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicArray;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.Utf8String;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple4;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AssetData extends Contract {
    public static final String[] BINARY_ARRAY = {"","","0a6002815481101515610d8f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610e29576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e20906173ed565b60405180910390fd5b6002604051908082528060200260200182016040528015610e5e57816020015b6060815260200190600190039081610e495790505b5090506040805190810160405280600981526020017f73657269616c4e756d0000000000000000000000000000000000000000000000815250816000815181101515610ea657fe5b90602001906020020181905250610ebc83614004565b816001815181101515610ecb57fe5b90602001906020020181905250610f026007610efc8673ffffffffffffffffffffffffffffffffffffffff16613a30565b8361415b565b91505092915050565b600030905090565b600a6000815481101515610f2357fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610fbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fb49061748d565b60405180910390fd5b80600a6002815481101515610fce57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a600081548110151561102b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600a600181548110151561106b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515611105576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110fc9061742d565b60405180910390fd5b80601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004600e8110151561115357fe5b01819055505050565b6000806060600a600281548110151561117157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561120b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611202906173ed565b60405180910390fd5b61126c86601060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e8110151561125c57fe5b015461443790919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e811015156112b957fe5b018190555061131f86601060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e8110151561130f57fe5b015461443790919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e8110151561136c57fe5b018190555061137961448e565b915060018414156115105760036040519080825280602002602001820160405280156113b957816020015b60608152602001906001900390816113a45790505b5090506113c582614004565b8160008151811015156113d457fe5b906020019060200201819052506113ea86614004565b8160018151811015156113f957fe5b9060200190602002018190525061140f85614004565b81600281518110151561141e57fe5b90602001906020020181905250611457600161144f8973ffffffffffffffffffffffffffffffffffffffff16613a30565b8360016144b4565b506114b986601060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004600e811015156114a957fe5b015461443790919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004600e8110151561150657fe5b01819055506115c4565b61157186601060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561156157fe5b015461443790919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e811015156115be57fe5b01819055505b6115cd876148c9565b92505094509492505050565b60006115e5600e614956565b905090565b60006060600a60028154811015156115fe57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515611698576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161168f906173ed565b60405180910390fd5b8260008151811015156116a757fe5b9060200190602002015190506116bb61448e565b91506116c682614004565b8360008151811015156116d557fe5b906020019060200201819052506116f06004828560016144b4565b5050919050565b60006060611724600761171f8573ffffffffffffffffffffffffffffffffffffffff16613a30565b613c72565b8092508193505050915091565b600a600281548110151561174157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156117db576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117d2906173ed565b60405180910390fd5b80600c8190555050565b60006060611812600161180d8573ffffffffffffffffffffffffffffffffffffffff16613a30565b613c72565b8092508193505050915091565b6000600a600281548110151561183157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156118cb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118c2906173ed565b60405180910390fd5b81601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561191957fe5b01541015151561195e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119559061740d565b60405180910390fd5b6119bf82601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e811015156119af57fe5b015461496790919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e81101515611a0c57fe5b0181905550611a7282601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e81101515611a6257fe5b015461496790919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e81101515611abf57fe5b0181905550611b2582601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e81101515611b1557fe5b015461496790919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e81101515611b7257fe5b0181905550611b80836148c9565b905092915050565b6000601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b600080611c95601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007600e81101515611c3657fe5b0154601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006600e81101515611c8557fe5b015461443790919063ffffffff16565b9050611d58601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005600e81101515611ce757fe5b0154611d4a83601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e81101515611d3a57fe5b015461496790919063ffffffff16565b61496790919063ffffffff16565b915050919050565b60006060806002604051908082528060200260200182016040528015611d9a57","816020015b6060815260200190600190039081611d855790505b5090506040805190810160405280600981526020017f73657269616c4e756d0000000000000000000000000000000000000000000000815250816000815181101515611de257fe5b90602001906020020181905250611df884614004565b816001815181101515611e0757fe5b90602001906020020181905250611e3e6007611e388773ffffffffffffffffffffffffffffffffffffffff16613a30565b836149be565b8093508194505050509250929050565b6000600a6001815481101515611e6057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060806002604051908082528060200260200182016040528015611eca57816020015b6060815260200190600190039081611eb55790505b5090506040805190810160405280600981526020017f73657269616c4e756d0000000000000000000000000000000000000000000000815250816000815181101515611f1257fe5b90602001906020020181905250611f2884614004565b816001815181101515611f3757fe5b90602001906020020181905250611f6e6004611f688773ffffffffffffffffffffffffffffffffffffffff16613a30565b836149be565b8093508194505050509250929050565b6060611f8a600e614f15565b905090565b6000600a6002815481101515611fa157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561203b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612032906173ed565b60405180910390fd5b81600081518110151561204a57fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005600e811015156120a157fe5b01819055508160018151811015156120b557fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b600e8110151561210c57fe5b018190555081600281518110151561212057fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c600e8110151561217757fe5b018190555081600381518110151561218b57fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600d600e811015156121e257fe5b01819055508160048151811015156121f657fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561224d57fe5b018190555061225b836148c9565b905092915050565b6000600a600281548110151561227557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561230f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612306906173ed565b60405180910390fd5b81600081518110151561231e57fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006600e8110151561237557fe5b018190555081600181518110151561238957fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007600e811015156123e057fe5b01819055508160028151811015156123f457fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008600e8110151561244b57fe5b018190555081600381518110151561245f57fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009600e811015156124b657fe5b01819055508160048151811015156124ca57fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a600e8110151561252157fe5b018190555081600581518110151561253557fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561258c57fe5b018190555061259a836148c9565b905092915050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a60008154811015156125fb57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612695576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161268c9061748d565b60405180910390fd5b80600a60008154811015156126a657fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600c54905090565b600061271182600e614fa790919063ffffffff16565b9050919050565b60006060600a600281548110151561272c57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156127c6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127bd906173ed565b60405180910390fd5b8260008151811015156127d557fe5b9060200190602002015190506127e961448e565b91506127f482614004565b83600081518110151561280357fe5b9060200190602002018190525061281e6007828560016144b4565b50600061284284600881518110151561283357fe5b90602001906020020151614ff6565b11156128c6578160136000612856846151c7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006128b38660088151811015156128a457fe5b90602001906020020151614ff6565b8152602001908152602001600020819055505b600d54601260006128d6846151c7565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050919050565b60006060600a600281548110151561292e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016129bf906173ed565b60405180910390fd5b60026040519080825280602002602001820160405280156129fd57816020015b60608152602001906001900390816129e85790505b5090506040805190810160405280600981526020017f73657269616c4e756d0000000000000000000000000000000000000000000000815250816000815181101515612a4557fe5b90602001906020020181905250612a5b83614004565b816001815181101515612a6a57fe5b90602001906020020181905250612aa16004612a9b8673ffffffffffffffffffffffffffffffffffffffff16613a30565b8361415b565b91505092915050565b600080600a6002815481101515612abd57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612b57576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b4e906173ed565b60405180910390fd5b612b5f61448e565b9150826000815181101515612b7057fe5b90602001906020020151601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e81101515612bc757fe5b0181905550826001815181101515612bdb57fe5b90602001906020020151601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e81101515612c3257fe5b0181905550826002815181101515612c4657fe5b90602001906020020151601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002600e81101515612c9d57fe5b0181905550826003815181101515612cb157fe5b90602001906020020151601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e81101515612d0857fe5b0181905550612d16846148c9565b90509250929050565b6060600b805480602002602001604051908101604052809291908181526020016000905b82821015612dff578382906000526020600020018054600181600116156101000203166002900480601f01602080910402602001604051908101604052","8092919081815260200182805460018160011615610100020316600290048015612deb5780601f10612dc057610100808354040283529160200191612deb565b820191906000526020600020905b815481529060010190602001808311612dce57829003601f168201915b505050505081526020019060010190612d43565b50505050905090565b600a6001815481101515612e1857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515612eb2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612ea99061742d565b60405180910390fd5b80601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e81101515612f0057fe5b01819055505050565b60006060600a6002815481101515612f1d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612fb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612fae906173ed565b60405180910390fd5b6002604051908082528060200260200182016040528015612fec57816020015b6060815260200190600190039081612fd75790505b5090506040805190810160405280600981526020017f73657269616c4e756d000000000000000000000000000000000000000000000081525081600081518110151561303457fe5b9060200190602002018190525082600081518110151561305057fe5b9060200190602002015181600181518110151561306957fe5b90602001906020020181905250613083600785858461553f565b50600191505092915050565b600a600181548110151561309f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515613139576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016131309061742d565b60405180910390fd5b80601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e8110151561318757fe5b01819055505050565b600060608060026040519080825280602002602001820160405280156131ca57816020015b60608152602001906001900390816131b55790505b5090506040805190810160405280600981526020017f73657269616c4e756d000000000000000000000000000000000000000000000081525081600081518110151561321257fe5b9060200190602002018190525061322884614004565b81600181518110151561323757fe5b9060200190602002018190525061326e60016132688773ffffffffffffffffffffffffffffffffffffffff16613a30565b836149be565b8093508194505050509250929050565b6060600e6040519080825280602002602001820160405280156132b05781602001602082028038833980820191505090505b509050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e8110151561330057fe5b015481600081518110151561331157fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e8110151561336c57fe5b015481600181518110151561337d57fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002600e811015156133d857fe5b01548160028151811015156133e957fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561344457fe5b015481600381518110151561345557fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004600e811015156134b057fe5b01548160048151811015156134c157fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005600e8110151561351c57fe5b015481600581518110151561352d57fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006600e8110151561358857fe5b015481600681518110151561359957fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007600e811015156135f457fe5b015481600781518110151561360557fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206008600e8110151561366057fe5b015481600881518110151561367157fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206009600e811015156136cc57fe5b01548160098151811015156136dd57fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600a600e8110151561373857fe5b015481600a81518110151561374957fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b600e811015156137a457fe5b015481600b8151811015156137b557fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c600e8110151561381057fe5b015481600c81518110151561382157fe5b9060200190602002018181525050601060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600d600e8110151561387c57fe5b015481600d81518110151561388d57fe5b9060200190602002018181525050919050565b60006060600a60028154811015156138b457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561394e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613945906173ed565b60405180910390fd5b600260405190808252806020026020018201604052801561398357816020015b606081526020019060019003908161396e5790505b5090506040805190810160405280600981526020017f73657269616c4e756d00000000000000000000000000000000000000000000008152508160008151811015156139cb57fe5b906020019060200201819052506139e183614004565b8160018151811015156139f057fe5b90602001906020020181905250613a276001613a218673ffffffffffffffffffffffffffffffffffffffff16613a30565b8361415b565b91505092915050565b606060006060600080856c01000000000000000000000000029350602a6040519080825280601f01601f191660200182016040528015613a7f5781602001602082028038833980820191505090505b5092507f3000000000000000000000000000000000000000000000000000000000000000836000815181101515613ab257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053507f7800000000000000000000000000000000000000000000000000000000000000836001815181101515613b1257fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600091505b6014821015613c66578382601481101515613b5e57fe5b1a7f0100000000000000000000000000000000000000000000000000000000000000027f010000000000000000000000000000000000000000000000000000000000000090049050613bbd600f60048360ff169060020a900416615a73565b836001849060020a02600201815181101515613bd557fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350613c11600f8216615a73565b836001849060020a02600301815181101515613c2957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508180600101925050613b47565b82945050505050919050565b600060606000806000613d20876000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d165780601f10613ceb57610100808354040283529160200191613d16565b820191906000526020600020905b815481529060010190602001808311613cf957829003601f168201915b5050505050615aec565b92508273ffffffffffffffffffffffffffffffffffffffff16637857d7c96040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015613d86","","","","565b616d8b8161770d565b82525050565b6000616d9c82617698565b808452616db08160208601602086016177ee565b616db981617821565b602085010191505092915050565b616dd0816177a9565b82525050565b616ddf816177bb565b82525050565b616dee81617719565b82525050565b616dfd816177cd565b82525050565b6000616e0e826176ae565b808452616e228160208601602086016177ee565b616e2b81617821565b602085010191505092915050565b6000616e44826176a3565b808452616e588160208601602086016177ee565b616e6181617821565b602085010191505092915050565b600081546001811660008114616e8c5760018114616eac57616eed565b607f600283041680865260ff198316602087015260408601935050616eed565b60028204808652602086019550616ec28561765a565b60005b82811015616ee457815481890152600182019150602081019050616ec5565b80880195505050505b505092915050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000601e82527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006020830152604082019050919050565b6000602582527f4173736574446174613a6f6e6c792063726561746f7220697320617574686f7260208301527f697a65642e0000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602382527f63616e5472616e73616374696f6e20616d6f756e74206973206e6f7420656e6f60208301527f75676800000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602382527f4173736574446174613a6f6e6c79206f776e657220697320617574686f72697a60208301527f65642e00000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000600e82527f4e6f742068657820737472696e670000000000000000000000000000000000006020830152604082019050919050565b6000601e82527f746865206c656e677468206f66205f6669656c6473206973206572726f7200006020830152604082019050919050565b6000602682527f4173736574446174613a6f6e6c7920676f7665726e6f7220697320617574686f60208301527f72697a65642e00000000000000000000000000000000000000000000000000006040830152606082019050919050565b61714e81617723565b82525050565b60006020820190506171696000830184616be1565b92915050565b600060208201905081810360008301526171898184616bf0565b905092915050565b600060208201905081810360008301526171ab8184616c4b565b905092915050565b600060208201905081810360008301526171cd8184616d27565b905092915050565b60006020820190506171ea6000830184616d82565b92915050565b60006020820190506172056000830184616de5565b92915050565b60006020820190506172206000830184616df4565b92915050565b600060208201905081810360008301526172408184616e39565b905092915050565b600060208201905081810360008301526172628184616e03565b905092915050565b600060408201905081810360008301526172848185616e03565b90506172936020830184616dc7565b9392505050565b600060408201905081810360008301526172b48185616e03565b90506172c36020830184616dd6565b9392505050565b600060608201905081810360008301526172e48186616e03565b90506172f36020830185616dd6565b6173006040830184616dc7565b949350505050565b600060408201905081810360008301526173228185616e39565b905081810360208301526173368184616e39565b90509392505050565b600060408201905081810360008301526173598185616e6f565b9050818103602083015261736d8184616e39565b90509392505050565b600060408201905081810360008301526173908185616e6f565b905081810360208301526173a48184616e03565b90509392505050565b600060208201905081810360008301526173c681616ef5565b9050919050565b600060208201905081810360008301526173e681616f2c565b9050919050565b6000602082019050818103600083015261740681616f63565b9050919050565b6000602082019050818103600083015261742681616fc0565b9050919050565b600060208201905081810360008301526174468161701d565b9050919050565b600060208201905081810360008301526174668161707a565b9050919050565b60006020820190508181036000830152617486816170b1565b9050919050565b600060208201905081810360008301526174a6816170e8565b9050919050565b60006020820190506174c26000830184617145565b92915050565b60006040820190506174dd6000830185617145565b81810360208301526174ef8184616cb9565b90509392505050565b600060408201905061750d6000830185617145565b818103602083015261751f8184616e03565b90509392505050565b600060408201905061753d6000830185617145565b61754a6020830184617145565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561757457600080fd5b8060405250919050565b600067ffffffffffffffff82111561759557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156175bd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156175e557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561761157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000617758826176ed565b9050919050565b600061776a826176ed565b9050919050565b600061777c826176ed565b9050919050565b600061778e826176ed565b9050919050565b6000819050919050565b6000819050919050565b60006177b4826176ed565b9050919050565b60006177c6826176ed565b9050919050565b60006177d882617719565b9050919050565b82818337600083830152505050565b60005b8381101561780c5780820151818401526020810190506177f1565b8381111561781b576000848401525b50505050565b6000601f19601f8301169050919050565b61783a617b22565b600060208301905060408051908101604052808451815260200182815250915050919050565b60008082600001516178848560000151866020015186600001518760200151617953565b0190505b8360000151846020015101811115156178d057818060010192505082600001516178c8856020015183038660000151038386600001518760200151617953565b019050617888565b5092915050565b6178df617b22565b6178ea838383617a39565b5092915050565b606080600083600001516040519080825280601f01601f19166020018201604052801561792d5781602001602082028038833980820191505090505b5091506020820190506179498185602001518660000151617ad7565b8192505050919050565b60008060008060008060008060008b97508c8b111515617a235760208b1115156179dd5760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b846000191683600019161415156179d55783881015156179c2578c8c019850617a29565b878060010198505085885116925061799e565b879850617a29565b8a8a209150600096505b8a8d0387111515617a22578a88209050806000191682600019161415617a0f57879850617a29565b60018801975086806001019750506179e7565b5b8c8c0198505b5050505050505050949350505050565b617a41617b22565b6000617a5f8560000151866020015186600001518760200151617953565b90508460200151836020018181525050846020015181038360000181815250508460000151856020015101811415617aa1576000856000018181525050617acc565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60005b602082101515617aff5782518452602084019350602083019250602082039150617ada565b6001826020036101000a0390508019835116818551168181178652505050505050565b6040805190810160405280600081526020016000815250905600a265627a7a72305820b16877ddf221efeccdc97573009a778c2b5b2b25abbe71ae4229586344af22cd6c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","08825162001214565b905092915050565b60006200101e82516200121e565b905092915050565b600080600080608085870312156200103d57600080fd5b60006200104d8782880162000f07565b9450506020620010608782880162000f07565b935050604085015167ffffffffffffffff8111156200107e57600080fd5b6200108c8782880162000f1d565b92505060606200109f8782880162001010565b91505092959194509250565b600060208284031215620010be57600080fd5b6000620010ce8482850162000ffa565b91505092915050565b6000620010e482620011e9565b808452620010fa81602086016020860162001228565b62001105816200125e565b602085010191505092915050565b600060608201905081810360008301526200112f8186620010d7565b90508181036020830152620011458185620010d7565b905081810360408301526200115b8184620010d7565b9050949350505050565b6000604051905081810181811067ffffffffffffffff821117156200118957600080fd5b8060405250919050565b600067ffffffffffffffff821115620011ab57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff821115620011d457600080fd5b601f19601f8301169050602081019050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000819050919050565b60005b83811015620012485780820151818401526020810190506200122b565b8381111562001258576000848401525b50505050565b6000601f19601f8301169050919050565b617b76806200127f6000396000f3006080604052600436106101e3576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806301b5bdd2146101e857806305282c7014610211578063064396d21461023a57806311567c421461027757806320ef38ab146102a25780632147281b146102df5780633539f9931461031c5780633ef61552146103455780633f1baf8414610383578063451fbfa6146103c05780634620a307146103e95780634c6e9b6114610414578063506436ab1461043d57806352310a271461047a5780636f95f520146104b757806379e6d96f146104f55780637fa3389b1461052057806383a743231461054b57806388906742146105885780638a973048146105c55780638ada774d146106035780638c03e66b1461062e5780638c9e58ae146106575780639e4ad09b14610680578063a15ccdd1146106bd578063a2609414146106fa578063a5565bcd14610723578063ab50a3c014610761578063af688bc81461078c578063b9512c33146107ca578063ba71c9fb14610807578063bfa5939a14610845578063bfabec5d1461086e578063c624d534146108ac578063c7d645d2146108d7578063ca383ed414610914578063ce30b72814610951578063ce913ce01461098f578063ebeb635f146109ba575b600080fd5b3480156101f457600080fd5b5061020f600480360361020a91908101906168e1565b6109f7565b005b34801561021d57600080fd5b50610238600480360361023391908101906168e1565b610afd565b005b34801561024657600080fd5b50610261600480360361025c919081019061690a565b610c03565b60405161026e91906174ad565b60405180910390f35b34801561028357600080fd5b5061028c610f42565b6040516102999190617154565b60405180910390f35b3480156102ae57600080fd5b506102c960048036036102c491908101906169fd565b610f4a565b6040516102d691906174ad565b60405180910390f35b3480156102eb57600080fd5b506103066004803603610301919081019061695e565b611057565b60405161031391906174ad565b60405180910390f35b34801561032857600080fd5b50610343600480360361033e919081019061695e565b6111e7565b005b34801561035157600080fd5b5061036c600480360361036791908101906168e1565b6112e8565b60405161037a9291906174f8565b60405180910390f35b34801561038f57600080fd5b506103aa60048036036103a591908101906168e1565b611322565b6040516103b791906171b3565b60405180910390f35b3480156103cc57600080fd5b506103e760048036036103e2919081019061695e565b611944565b005b3480156103f557600080fd5b506103fe611a45565b60405161040b91906174ad565b60405180910390f35b34801561042057600080fd5b5061043b60048036036104369190810190616bb8565b611a56565b005b34801561044957600080fd5b50610464600480360361045f91908101906169fd565b611b0a565b60405161047191906174ad565b60405180910390f35b34801561048657600080fd5b506104a1600480360361049c919081019061695e565b611d0c565b6040516104ae91906174ad565b60405180910390f35b3480156104c357600080fd5b506104de60048036036104d9919081019061695e565b612075565b6040516104ec9291906174c8565b60405180910390f35b34801561050157600080fd5b5061050a612163565b6040516105179190617154565b60405180910390f35b34801561052c57600080fd5b506105356121a5565b604051610542919061716f565b60405180910390f35b34801561055757600080fd5b50610572600480360361056d919081019061690a565b6121b6565b60405161057f91906174ad565b60405180910390f35b34801561059457600080fd5b506105af60048036036105aa919081019061695e565b61248a565b6040516105bc91906174ad565b60405180910390f35b3480156105d157600080fd5b506105ec60048036036105e7919081019061695e565b6124e5565b6040516105fa9291906174c8565b60405180910390f35b34801561060f57600080fd5b506106186125d3565b60405161062591906174ad565b60405180910390f35b34801561063a57600080fd5b506106556004803603610650919081019061695e565b6125dd565b005b34801561066357600080fd5b5061067e6004803603610679919081019061695e565b6126de565b005b34801561068c57600080fd5b506106a760048036036106a291908101906168e1565b6127df565b6040516106b491906171d5565b60405180910390f35b3480156106c957600080fd5b506106e460048036036106df91908101906168e1565b6127fc565b6040516106f191906174ad565b60405180910390f35b34801561070657600080fd5b50610721600480360361071c91908101906168e1565b612845565b005b34801561072f57600080fd5b5061074a6004803603610745919081019061699a565b61294b565b604051610758929190617528565b60405180910390f35b34801561076d57600080fd5b50610776612dc8565b6040516107839190617191565b60405180910390f35b34801561079857600080fd5b506107b360048036036107ae919081019061690a565b612eb1565b6040516107c1929190617528565b60405180910390f35b3480156107d657600080fd5b506107f160048036036107ec9190810190616b4c565b613126565b6040516107fe91906171d5565b60405180910390f35b34801561081357600080fd5b5061082e6004803603610829919081019061695e565b6132ac565b60405161083c9291906174c8565b60405180910390f35b34801561085157600080fd5b5061086c6004803603610867919081019061695e565b61339a565b005b34801561087a57600080fd5b50610895600480360361089091908101906168e1565b61349b565b6040516108a39291906174f8565b60405180910390f35b3480156108b857600080fd5b506108c16134d5565b6040516108ce9190617154565b60405180910390f35b3480156108e357600080fd5b506108fe60048036036108f9919081019061695e565b613517565b60405161090b91906174ad565b60405180910390f35b34801561092057600080fd5b5061093b600480360361093691908101906168e1565b6136a7565b60405161094891906174ad565b60405180910390f35b34801561095d57600080fd5b50610978600480360361097391908101906168e1565b613824565b6040516109869291906174f8565b60405180910390f35b34801561099b57600080fd5b506109a461385e565b6040516109b19190617154565b60405180910390f35b3480156109c657600080fd5b506109e160048036036109dc919081019061695e565b6138a0565b6040516109ee91906174ad565b60405180910390f35b600a6000815481101515610a0757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610aa1576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610a98906173cd565b60405180910390fd5b80600a6000815481101515610ab257fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600a6000815481101515610b0d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610ba7576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610b9e906173cd565b60405180910390fd5b80600a6001815481101515610bb857fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600a6002815481101515610c1557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515610caf576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610ca69061746d565b60405180910390fd5b816000815181101515610cbe57fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006600e81101515610d1557fe5b0181905550816001815181101515610d2957fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007600e81101515610d8057fe5b","","7fc703cb12000000000000000000000000000000000000000000000000000000008152600401611daf9061746d565b60405180910390fd5b81601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e81101515611e0657fe5b015410151515611e4b576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401611e42906173ad565b60405180910390fd5b611eac82601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e81101515611e9c57fe5b0154614e5990919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e81101515611ef957fe5b0181905550611f5f82601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e81101515611f4f57fe5b0154614e5990919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e81101515611fac57fe5b018190555061201282601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561200257fe5b0154614e5990919063ffffffff16565b601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561205f57fe5b018190555061206d83613a30565b905092915050565b600060608060026040519080825280602002602001820160405280156120af57816020015b606081526020019060019003908161209a5790505b5090506040805190810160405280600981526020017f73657269616c4e756d00000000000000000000000000000000000000000000008152508160008151811015156120f757fe5b9060200190602002018190525061210d84613ae3565b81600181518110151561211c57fe5b90602001906020020181905250612153600761214d8773ffffffffffffffffffffffffffffffffffffffff1661404f565b83614eb0565b8093508194505050509250929050565b6000600a600281548110151561217557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60606121b1600e615407565b905090565b6000600a60028154811015156121c857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612262576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016122599061746d565b60405180910390fd5b81600081518110151561227157fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005600e811015156122c857fe5b01819055508160018151811015156122dc57fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600b600e8110151561233357fe5b018190555081600281518110151561234757fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600c600e8110151561239e57fe5b01819055508160038151811015156123b257fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600d600e8110151561240957fe5b018190555081600481518110151561241d57fe5b90602001906020020151601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561247457fe5b018190555061248283613a30565b905092915050565b6000601360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002054905092915050565b6000606080600260405190808252806020026020018201604052801561251f57816020015b606081526020019060019003908161250a5790505b5090506040805190810160405280600981526020017f73657269616c4e756d000000000000000000000000000000000000000000000081525081600081518110151561256757fe5b9060200190602002018190525061257d84613ae3565b81600181518110151561258c57fe5b906020019060200201819052506125c360016125bd8773ffffffffffffffffffffffffffffffffffffffff1661404f565b83614eb0565b8093508194505050509250929050565b6000600c54905090565b600a60018154811015156125ed57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515612687576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161267e9061742d565b60405180910390fd5b80601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007600e811015156126d557fe5b01819055505050565b600a60018154811015156126ee57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515612788576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161277f9061742d565b60405180910390fd5b80601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e811015156127d657fe5b01819055505050565b60006127f582600e61549990919063ffffffff16565b9050919050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b600a600081548110151561285557fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156128ef576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016128e6906173cd565b60405180910390fd5b80600a600281548110151561290057fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000806060600a600281548110151561296057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156129fa576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016129f19061746d565b60405180910390fd5b612a5b86601060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e81101515612a4b57fe5b01546154e890919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e81101515612aa857fe5b0181905550612b0e86601060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e81101515612afe57fe5b01546154e890919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e81101515612b5b57fe5b0181905550612b68613abd565b91506001841415612cff576003604051908082528060200260200182016040528015612ba857816020015b6060815260200190600190039081612b935790505b509050612bb482613ae3565b816000815181101515612bc357fe5b90602001906020020181905250612bd986613ae3565b816001815181101515612be857fe5b90602001906020020181905250612bfe85613ae3565b816002815181101515612c0d57fe5b90602001906020020181905250612c466001612c3e8973ffffffffffffffffffffffffffffffffffffffff1661404f565b836001613c3a565b50612ca886601060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004600e81101515612c9857fe5b01546154e890919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004600e81101515612cf557fe5b0181905550612db3565b612d6086601060008a73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e81101515612d5057fe5b01546154e890919063ffffffff16565b601060008973ffffffffffffffffffffffffffffffffffffffff1673ffffffff","ffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e81101515612dad57fe5b01819055505b612dbc87613a30565b92505094509492505050565b6060600b805480602002602001604051908101604052809291908181526020016000905b82821015612ea8578382906000526020600020018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015612e945780601f10612e6957610100808354040283529160200191612e94565b820191906000526020600020905b815481529060010190602001808311612e7757829003601f168201915b505050505081526020019060010190612dec565b50505050905090565b600080600a6002815481101515612ec457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16141515612f5e576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401612f559061746d565b60405180910390fd5b612f66613abd565b9150826000815181101515612f7757fe5b90602001906020020151601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e81101515612fce57fe5b0181905550826001815181101515612fe257fe5b90602001906020020151601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001600e8110151561303957fe5b018190555082600281518110151561304d57fe5b90602001906020020151601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002600e811015156130a457fe5b01819055508260038151811015156130b857fe5b90602001906020020151601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003600e8110151561310f57fe5b018190555061311d84613a30565b90509250929050565b60006060600a600281548110151561313a57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156131d4576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016131cb9061746d565b60405180910390fd5b600260405190808252806020026020018201604052801561320957816020015b60608152602001906001900390816131f45790505b5090506040805190810160405280600981526020017f73657269616c4e756d000000000000000000000000000000000000000000000081525081600081518110151561325157fe5b9060200190602002018190525082600081518110151561326d57fe5b9060200190602002015181600181518110151561328657fe5b906020019060200201819052506132a0600785858461553f565b50600191505092915050565b600060608060026040519080825280602002602001820160405280156132e657816020015b60608152602001906001900390816132d15790505b5090506040805190810160405280600981526020017f73657269616c4e756d000000000000000000000000000000000000000000000081525081600081518110151561332e57fe5b9060200190602002018190525061334484613ae3565b81600181518110151561335357fe5b9060200190602002018190525061338a60046133848773ffffffffffffffffffffffffffffffffffffffff1661404f565b83614eb0565b8093508194505050509250929050565b600a60018154811015156133aa57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163273ffffffffffffffffffffffffffffffffffffffff16141515613444576040517fc703cb1200000000000000000000000000000000000000000000000000000000815260040161343b9061742d565b60405180910390fd5b80601060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206004600e8110151561349257fe5b01819055505050565b600060606134c860046134c38573ffffffffffffffffffffffffffffffffffffffff1661404f565b61456d565b8092508193505050915091565b6000600a60018154811015156134e757fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060600a600281548110151561352b57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415156135c5576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016135bc9061746d565b60405180910390fd5b60026040519080825280602002602001820160405280156135fa57816020015b60608152602001906001900390816135e55790505b5090506040805190810160405280600981526020017f73657269616c4e756d000000000000000000000000000000000000000000000081525081600081518110151561364257fe5b9060200190602002018190525061365883613ae3565b81600181518110151561366757fe5b9060200190602002018190525061369e60046136988673ffffffffffffffffffffffffffffffffffffffff1661404f565b83614291565b91505092915050565b600080613759601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007600e811015156136fa57fe5b0154601060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006600e8110151561374957fe5b01546154e890919063ffffffff16565b905061381c601060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206005600e811015156137ab57fe5b015461380e83601060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000600e811015156137fe57fe5b0154614e5990919063ffffffff16565b614e5990919063ffffffff16565b915050919050565b60006060613851600161384c8573ffffffffffffffffffffffffffffffffffffffff1661404f565b61456d565b8092508193505050915091565b6000600a600081548110151561387057fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060600a60028154811015156138b457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614151561394e576040517fc703cb120000000000000000000000000000000000000000000000000000000081526004016139459061746d565b60405180910390fd5b600260405190808252806020026020018201604052801561398357816020015b606081526020019060019003908161396e5790505b5090506040805190810160405280600981526020017f73657269616c4e756d00000000000000000000000000000000000000000000008152508160008151811015156139cb57fe5b906020019060200201819052506139e183613ae3565b8160018151811015156139f057fe5b90602001906020020181905250613a276001613a218673ffffffffffffffffffffffffffffffffffffffff1661404f565b83614291565b91505092915050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905043601160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550919050565b6000613ad56001600d546154e890919063ffffffff16565b600d81905550600d54905090565b60606000806060600080861415613b31576040805190810160405280600181526020017f30000000000000000000000000000000000000000000000000000000000000008152509450613c31565b8593505b600084141515613b5b578280600101935050600a84811515613b5357fe5b049350613b35565b826040519080825280601f01601f191660200182016040528015613b8e5781602001602082028038833980820191505090505b5091506001830390505b600086141515613c2d57600a86811515613bae57fe5b066030017f010000000000000000000000000000000000000000000000000000000000000002828280600190039350815181101515613be957fe5b9060200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350600a86811515613c2557fe5b049550613b98565b8194505b50505050919050565b60008060006060600080600088518b60020180549050141515613c92576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401613c899061748d565b60405180910390fd5b6000955060009450613d3f8b6000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015613d355780601f10613d0a57610100808354040283529160200191613d35565b820191906000526020600020905b815481529060010190602001808311613d1857829003601f168201915b5050505050615a73565b92508715613d505760039450613d63565b613d5a8b8b61456d565b80955081965050505b6003851415614039578273ffffffffffffffffffffffffffffffffffff","","","","565b616d8b8161770d565b82525050565b6000616d9c82617698565b808452616db08160208601602086016177ee565b616db981617821565b602085010191505092915050565b616dd0816177a9565b82525050565b616ddf816177bb565b82525050565b616dee81617719565b82525050565b616dfd816177cd565b82525050565b6000616e0e826176ae565b808452616e228160208601602086016177ee565b616e2b81617821565b602085010191505092915050565b6000616e44826176a3565b808452616e588160208601602086016177ee565b616e6181617821565b602085010191505092915050565b600081546001811660008114616e8c5760018114616eac57616eed565b607f600283041680865260ff198316602087015260408601935050616eed565b60028204808652602086019550616ec28561765a565b60005b82811015616ee457815481890152600182019150602081019050616ec5565b80880195505050505b505092915050565b6000602382527f63616e5472616e73616374696f6e20616d6f756e74206973206e6f7420656e6f60208301527f75676800000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000602682527f4173736574446174613a6f6e6c7920676f7665726e6f7220697320617574686f60208301527f72697a65642e00000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000600e82527f4e6f742068657820737472696e670000000000000000000000000000000000006020830152604082019050919050565b6000601b82527f536166654d6174683a206164646974696f6e206f766572666c6f7700000000006020830152604082019050919050565b6000602382527f4173736574446174613a6f6e6c79206f776e657220697320617574686f72697a60208301527f65642e00000000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601e82527f536166654d6174683a207375627472616374696f6e206f766572666c6f7700006020830152604082019050919050565b6000602582527f4173736574446174613a6f6e6c792063726561746f7220697320617574686f7260208301527f697a65642e0000000000000000000000000000000000000000000000000000006040830152606082019050919050565b6000601e82527f746865206c656e677468206f66205f6669656c6473206973206572726f7200006020830152604082019050919050565b61714e81617723565b82525050565b60006020820190506171696000830184616be1565b92915050565b600060208201905081810360008301526171898184616bf0565b905092915050565b600060208201905081810360008301526171ab8184616c4b565b905092915050565b600060208201905081810360008301526171cd8184616d27565b905092915050565b60006020820190506171ea6000830184616d82565b92915050565b60006020820190506172056000830184616de5565b92915050565b60006020820190506172206000830184616df4565b92915050565b600060208201905081810360008301526172408184616e39565b905092915050565b600060208201905081810360008301526172628184616e03565b905092915050565b600060408201905081810360008301526172848185616e03565b90506172936020830184616dc7565b9392505050565b600060408201905081810360008301526172b48185616e03565b90506172c36020830184616dd6565b9392505050565b600060608201905081810360008301526172e48186616e03565b90506172f36020830185616dd6565b6173006040830184616dc7565b949350505050565b600060408201905081810360008301526173228185616e39565b905081810360208301526173368184616e39565b90509392505050565b600060408201905081810360008301526173598185616e6f565b9050818103602083015261736d8184616e39565b90509392505050565b600060408201905081810360008301526173908185616e6f565b905081810360208301526173a48184616e03565b90509392505050565b600060208201905081810360008301526173c681616ef5565b9050919050565b600060208201905081810360008301526173e681616f52565b9050919050565b6000602082019050818103600083015261740681616faf565b9050919050565b6000602082019050818103600083015261742681616fe6565b9050919050565b600060208201905081810360008301526174468161701d565b9050919050565b600060208201905081810360008301526174668161707a565b9050919050565b60006020820190508181036000830152617486816170b1565b9050919050565b600060208201905081810360008301526174a68161710e565b9050919050565b60006020820190506174c26000830184617145565b92915050565b60006040820190506174dd6000830185617145565b81810360208301526174ef8184616cb9565b90509392505050565b600060408201905061750d6000830185617145565b818103602083015261751f8184616e03565b90509392505050565b600060408201905061753d6000830185617145565b61754a6020830184617145565b9392505050565b6000604051905081810181811067ffffffffffffffff8211171561757457600080fd5b8060405250919050565b600067ffffffffffffffff82111561759557600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156175bd57600080fd5b602082029050602081019050919050565b600067ffffffffffffffff8211156175e557600080fd5b601f19601f8301169050602081019050919050565b600067ffffffffffffffff82111561761157600080fd5b601f19601f8301169050602081019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000617758826176ed565b9050919050565b600061776a826176ed565b9050919050565b600061777c826176ed565b9050919050565b600061778e826176ed565b9050919050565b6000819050919050565b6000819050919050565b60006177b4826176ed565b9050919050565b60006177c6826176ed565b9050919050565b60006177d882617719565b9050919050565b82818337600083830152505050565b60005b8381101561780c5780820151818401526020810190506177f1565b8381111561781b576000848401525b50505050565b6000601f19601f8301169050919050565b61783a617b22565b600060208301905060408051908101604052808451815260200182815250915050919050565b60008082600001516178848560000151866020015186600001518760200151617953565b0190505b8360000151846020015101811115156178d057818060010192505082600001516178c8856020015183038660000151038386600001518760200151617953565b019050617888565b5092915050565b6178df617b22565b6178ea838383617a39565b5092915050565b606080600083600001516040519080825280601f01601f19166020018201604052801561792d5781602001602082028038833980820191505090505b5091506020820190506179498185602001518660000151617ad7565b8192505050919050565b60008060008060008060008060008b97508c8b111515617a235760208b1115156179dd5760018b60200360080260020a03196001029550858a511694508a8d8d010393508588511692505b846000191683600019161415156179d55783881015156179c2578c8c019850617a29565b878060010198505085885116925061799e565b879850617a29565b8a8a209150600096505b8a8d0387111515617a22578a88209050806000191682600019161415617a0f57879850617a29565b60018801975086806001019750506179e7565b5b8c8c0198505b5050505050505050949350505050565b617a41617b22565b6000617a5f8560000151866020015186600001518760200151617953565b90508460200151836020018181525050846020015181038360000181815250508460000151856020015101811415617aa1576000856000018181525050617acc565b8360000151836000015101856000018181510391508181525050836000015181018560200181815250505b829150509392505050565b60005b602082101515617aff5782518452602084019350602083019250602082039150617ada565b6001826020036101000a0390508019835116818551168181178652505050505050565b6040805190810160405280600081526020016000815250905600a265627a7a723058203e680875a3c54d66804b00cd6df9874bc7db714952fb02b54e1318700b0cffd26c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"waitingFreeze\",\"type\":\"uint256\"}],\"name\":\"updateWaitingFreeze\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"restrictedSales\",\"type\":\"uint256\"}],\"name\":\"updateRestrictedSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pledgor\",\"type\":\"address\"}],\"name\":\"getPledgeDetailByAccount\",\"outputs\":[{\"name\":\"statusCode\",\"type\":\"uint256\"},{\"name\":\"retContent\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_frozenNumber\",\"type\":\"uint256\"}],\"name\":\"removeFrozenDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovernor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"transRestrictedSales\",\"type\":\"uint256\"}],\"name\":\"updateTransRestrictedSales\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"toAccount\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"releaseTime\",\"type\":\"uint256\"},{\"name\":\"transferType\",\"type\":\"uint256\"}],\"name\":\"transferIn\",\"outputs\":[{\"name\":\"previousBlock\",\"type\":\"uint256\"},{\"name\":\"number\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHolders\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fields\",\"type\":\"string[]\"}],\"name\":\"addPledgeDetail\",\"outputs\":[{\"name\":\"_pledgeNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getFrozenDetailByAccount\",\"outputs\":[{\"name\":\"statusCode\",\"type\":\"uint256\"},{\"name\":\"retContent\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_totalBalances\",\"type\":\"uint256\"}],\"name\":\"updateTotalSupply\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getTransRestrictedDetailByAccount\",\"outputs\":[{\"name\":\"status\",\"type\":\"uint256\"},{\"name\":\"detail\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"fromAccount\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferOut\",\"outputs\":[{\"name\":\"previousBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"_frozenNumber\",\"type\":\"uint256\"}],\"name\":\"getNextWaitingFrozenNumber\",\"outputs\":[{\"name\":\"waitingNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pledgor\",\"type\":\"address\"}],\"name\":\"canPledgeAmount\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_frozenNumber\",\"type\":\"uint256\"}],\"name\":\"getFrozenDetailByNumber\",\"outputs\":[{\"name\":\"statusCode\",\"type\":\"uint256\"},{\"name\":\"retContent\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_pledgor\",\"type\":\"address\"},{\"name\":\"_pledgeNumber\",\"type\":\"uint256\"}],\"name\":\"getPledgeDetailByNumber\",\"outputs\":[{\"name\":\"statusCode\",\"type\":\"uint256\"},{\"name\":\"retContent\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getHoldersList\",\"outputs\":[{\"name\":\"\",\"type\":\"address[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"dataUint\",\"type\":\"uint256[]\"}],\"name\":\"updatePledge\",\"outputs\":[{\"name\":\"previousBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"dataUint\",\"type\":\"uint256[]\"}],\"name\":\"updateFreeze\",\"outputs\":[{\"name\":\"previousBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getLastBlockRecord\",\"outputs\":[{\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTotalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasAccount\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_fields\",\"type\":\"string[]\"}],\"name\":\"addFrozenDetail\",\"outputs\":[{\"name\":\"_frozenNumber\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_pledgeNumber\",\"type\":\"uint256\"}],\"name\":\"removePledgeDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"dataUint\",\"type\":\"uint256[]\"}],\"name\":\"updateBalance\",\"outputs\":[{\"name\":\"number\",\"type\":\"uint256\"},{\"name\":\"previousBlock\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getAssetAttrValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"canTrans\",\"type\":\"uint256\"}],\"name\":\"updateCanTrans\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_assetOwnerAddress\",\"type\":\"string\"},{\"name\":\"_fields\",\"type\":\"string[]\"}],\"name\":\"updateFrozenDetail\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"circulate\",\"type\":\"uint256\"}],\"name\":\"updateCirculate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_account\",\"type\":\"address\"},{\"name\":\"_transNumber\",\"type\":\"uint256\"}],\"name\":\"getTransRestrictedDetailByNumber\",\"outputs\":[{\"name\":\"statusCode\",\"type\":\"uint256\"},{\"name\":\"retContent\",\"type\":\"string[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"detail\",\"type\":\"uint256[]\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_accou","nt\",\"type\":\"address\"},{\"name\":\"_number\",\"type\":\"uint256\"}],\"name\":\"removeTransTimeLock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_governor\",\"type\":\"address\"},{\"name\":\"dataStr\",\"type\":\"bytes[]\"},{\"name\":\"_totalBalances\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tableName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"primaryKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"fields\",\"type\":\"string\"}],\"name\":\"InsertRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tableName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"primaryKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"fields\",\"type\":\"string\"}],\"name\":\"UpdateRecord\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"tableName\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"primaryKey\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"fields\",\"type\":\"string\"},{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"UpdateRecordError\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"msg\",\"type\":\"string\"}],\"name\":\"Debug\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETCREATOR = "getCreator";

    public static final String FUNC_UPDATEWAITINGFREEZE = "updateWaitingFreeze";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_UPDATERESTRICTEDSALES = "updateRestrictedSales";

    public static final String FUNC_GETPLEDGEDETAILBYACCOUNT = "getPledgeDetailByAccount";

    public static final String FUNC_REMOVEFROZENDETAIL = "removeFrozenDetail";

    public static final String FUNC_GETADDRESS = "getAddress";

    public static final String FUNC_SETCREATOR = "setCreator";

    public static final String FUNC_GETGOVERNOR = "getGovernor";

    public static final String FUNC_UPDATETRANSRESTRICTEDSALES = "updateTransRestrictedSales";

    public static final String FUNC_TRANSFERIN = "transferIn";

    public static final String FUNC_GETHOLDERS = "getHolders";

    public static final String FUNC_ADDPLEDGEDETAIL = "addPledgeDetail";

    public static final String FUNC_GETFROZENDETAILBYACCOUNT = "getFrozenDetailByAccount";

    public static final String FUNC_UPDATETOTALSUPPLY = "updateTotalSupply";

    public static final String FUNC_GETTRANSRESTRICTEDDETAILBYACCOUNT = "getTransRestrictedDetailByAccount";

    public static final String FUNC_TRANSFEROUT = "transferOut";

    public static final String FUNC_GETNEXTWAITINGFROZENNUMBER = "getNextWaitingFrozenNumber";

    public static final String FUNC_CANPLEDGEAMOUNT = "canPledgeAmount";

    public static final String FUNC_GETFROZENDETAILBYNUMBER = "getFrozenDetailByNumber";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_GETPLEDGEDETAILBYNUMBER = "getPledgeDetailByNumber";

    public static final String FUNC_GETHOLDERSLIST = "getHoldersList";

    public static final String FUNC_UPDATEPLEDGE = "updatePledge";

    public static final String FUNC_UPDATEFREEZE = "updateFreeze";

    public static final String FUNC_GETLASTBLOCKRECORD = "getLastBlockRecord";

    public static final String FUNC_SETGOVERNOR = "setGovernor";

    public static final String FUNC_GETTOTALSUPPLY = "getTotalSupply";

    public static final String FUNC_HASACCOUNT = "hasAccount";

    public static final String FUNC_ADDFROZENDETAIL = "addFrozenDetail";

    public static final String FUNC_REMOVEPLEDGEDETAIL = "removePledgeDetail";

    public static final String FUNC_UPDATEBALANCE = "updateBalance";

    public static final String FUNC_GETASSETATTRVALUE = "getAssetAttrValue";

    public static final String FUNC_UPDATECANTRANS = "updateCanTrans";

    public static final String FUNC_UPDATEFROZENDETAIL = "updateFrozenDetail";

    public static final String FUNC_UPDATECIRCULATE = "updateCirculate";

    public static final String FUNC_GETTRANSRESTRICTEDDETAILBYNUMBER = "getTransRestrictedDetailByNumber";

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_REMOVETRANSTIMELOCK = "removeTransTimeLock";

    public static final Event INSERTRECORD_EVENT = new Event("InsertRecord", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATERECORD_EVENT = new Event("UpdateRecord", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event UPDATERECORDERROR_EVENT = new Event("UpdateRecordError", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}, new TypeReference<Utf8String>() {}));
    ;

    public static final Event DEBUG_EVENT = new Event("Debug", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}));
    ;

    protected AssetData(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String getCreator() throws ContractException {
        final Function function = new Function(FUNC_GETCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt updateWaitingFreeze(String account, BigInteger waitingFreeze) {
        final Function function = new Function(
                FUNC_UPDATEWAITINGFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(waitingFreeze)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateWaitingFreeze(String account, BigInteger waitingFreeze, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEWAITINGFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(waitingFreeze)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateWaitingFreeze(String account, BigInteger waitingFreeze) {
        final Function function = new Function(
                FUNC_UPDATEWAITINGFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(waitingFreeze)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateWaitingFreezeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEWAITINGFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateRestrictedSales(String account, BigInteger restrictedSales) {
        final Function function = new Function(
                FUNC_UPDATERESTRICTEDSALES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(restrictedSales)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateRestrictedSales(String account, BigInteger restrictedSales, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATERESTRICTEDSALES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(restrictedSales)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateRestrictedSales(String account, BigInteger restrictedSales) {
        final Function function = new Function(
                FUNC_UPDATERESTRICTEDSALES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(restrictedSales)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateRestrictedSalesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATERESTRICTEDSALES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, String> getPledgeDetailByAccount(String _pledgor) throws ContractException {
        final Function function = new Function(FUNC_GETPLEDGEDETAILBYACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_pledgor)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt removeFrozenDetail(String _account, BigInteger _frozenNumber) {
        final Function function = new Function(
                FUNC_REMOVEFROZENDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_frozenNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeFrozenDetail(String _account, BigInteger _frozenNumber, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEFROZENDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_frozenNumber)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveFrozenDetail(String _account, BigInteger _frozenNumber) {
        final Function function = new Function(
                FUNC_REMOVEFROZENDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_frozenNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRemoveFrozenDetailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEFROZENDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveFrozenDetailOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEFROZENDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public String getAddress() throws ContractException {
        final Function function = new Function(FUNC_GETADDRESS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt setCreator(String _creator) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setCreator(String _creator, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetCreator(String _creator) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetCreatorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getGovernor() throws ContractException {
        final Function function = new Function(FUNC_GETGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt updateTransRestrictedSales(String account, BigInteger transRestrictedSales) {
        final Function function = new Function(
                FUNC_UPDATETRANSRESTRICTEDSALES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(transRestrictedSales)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateTransRestrictedSales(String account, BigInteger transRestrictedSales, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETRANSRESTRICTEDSALES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(transRestrictedSales)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateTransRestrictedSales(String account, BigInteger transRestrictedSales) {
        final Function function = new Function(
                FUNC_UPDATETRANSRESTRICTEDSALES, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(transRestrictedSales)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateTransRestrictedSalesInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATETRANSRESTRICTEDSALES, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt transferIn(String toAccount, BigInteger amount, BigInteger releaseTime, BigInteger transferType) {
        final Function function = new Function(
                FUNC_TRANSFERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(toAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(releaseTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(transferType)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transferIn(String toAccount, BigInteger amount, BigInteger releaseTime, BigInteger transferType, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(toAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(releaseTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(transferType)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferIn(String toAccount, BigInteger amount, BigInteger releaseTime, BigInteger transferType) {
        final Function function = new Function(
                FUNC_TRANSFERIN, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(toAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(releaseTime), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(transferType)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple4<String, BigInteger, BigInteger, BigInteger> getTransferInInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple4<String, BigInteger, BigInteger, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue(), 
                (BigInteger) results.get(3).getValue()
                );
    }

    public Tuple2<BigInteger, BigInteger> getTransferInOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFERIN, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public BigInteger getHolders() throws ContractException {
        final Function function = new Function(FUNC_GETHOLDERS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt addPledgeDetail(List<String> _fields) {
        final Function function = new Function(
                FUNC_ADDPLEDGEDETAIL, 
                Arrays.<Type>asList(_fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addPledgeDetail(List<String> _fields, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDPLEDGEDETAIL, 
                Arrays.<Type>asList(_fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddPledgeDetail(List<String> _fields) {
        final Function function = new Function(
                FUNC_ADDPLEDGEDETAIL, 
                Arrays.<Type>asList(_fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getAddPledgeDetailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDPLEDGEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getAddPledgeDetailOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDPLEDGEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, String> getFrozenDetailByAccount(String _account) throws ContractException {
        final Function function = new Function(FUNC_GETFROZENDETAILBYACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt updateTotalSupply(BigInteger _totalBalances) {
        final Function function = new Function(
                FUNC_UPDATETOTALSUPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalBalances)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateTotalSupply(BigInteger _totalBalances, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATETOTALSUPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalBalances)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateTotalSupply(BigInteger _totalBalances) {
        final Function function = new Function(
                FUNC_UPDATETOTALSUPPLY, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalBalances)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<BigInteger> getUpdateTotalSupplyInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATETOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public Tuple2<BigInteger, String> getTransRestrictedDetailByAccount(String account) throws ContractException {
        final Function function = new Function(FUNC_GETTRANSRESTRICTEDDETAILBYACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Utf8String>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, String>(
                (BigInteger) results.get(0).getValue(), 
                (String) results.get(1).getValue());
    }

    public TransactionReceipt transferOut(String fromAccount, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFEROUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(fromAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transferOut(String fromAccount, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFEROUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(fromAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferOut(String fromAccount, BigInteger amount) {
        final Function function = new Function(
                FUNC_TRANSFEROUT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(fromAccount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getTransferOutInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFEROUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getTransferOutOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFEROUT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getNextWaitingFrozenNumber(String account, BigInteger _frozenNumber) throws ContractException {
        final Function function = new Function(FUNC_GETNEXTWAITINGFROZENNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_frozenNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public BigInteger canPledgeAmount(String _pledgor) throws ContractException {
        final Function function = new Function(FUNC_CANPLEDGEAMOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_pledgor)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Tuple2<BigInteger, List<String>> getFrozenDetailByNumber(String _account, BigInteger _frozenNumber) throws ContractException {
        final Function function = new Function(FUNC_GETFROZENDETAILBYNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_frozenNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, List<String>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public Tuple2<BigInteger, List<String>> getPledgeDetailByNumber(String _pledgor, BigInteger _pledgeNumber) throws ContractException {
        final Function function = new Function(FUNC_GETPLEDGEDETAILBYNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_pledgor), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_pledgeNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, List<String>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public List getHoldersList() throws ContractException {
        final Function function = new Function(FUNC_GETHOLDERSLIST, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Address>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt updatePledge(String account, List<BigInteger> dataUint) {
        final Function function = new Function(
                FUNC_UPDATEPLEDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updatePledge(String account, List<BigInteger> dataUint, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEPLEDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdatePledge(String account, List<BigInteger> dataUint) {
        final Function function = new Function(
                FUNC_UPDATEPLEDGE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<BigInteger>> getUpdatePledgeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEPLEDGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<BigInteger>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public Tuple1<BigInteger> getUpdatePledgeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEPLEDGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateFreeze(String account, List<BigInteger> dataUint) {
        final Function function = new Function(
                FUNC_UPDATEFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateFreeze(String account, List<BigInteger> dataUint, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateFreeze(String account, List<BigInteger> dataUint) {
        final Function function = new Function(
                FUNC_UPDATEFREEZE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<BigInteger>> getUpdateFreezeInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<BigInteger>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public Tuple1<BigInteger> getUpdateFreezeOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEFREEZE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public BigInteger getLastBlockRecord(String account) throws ContractException {
        final Function function = new Function(FUNC_GETLASTBLOCKRECORD, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setGovernor(String _governor) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setGovernor(String _governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetGovernor(String _governor) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public BigInteger getTotalSupply() throws ContractException {
        final Function function = new Function(FUNC_GETTOTALSUPPLY, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public Boolean hasAccount(String account) throws ContractException {
        final Function function = new Function(FUNC_HASACCOUNT, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        return executeCallWithSingleValueReturn(function, Boolean.class);
    }

    public TransactionReceipt addFrozenDetail(List<String> _fields) {
        final Function function = new Function(
                FUNC_ADDFROZENDETAIL, 
                Arrays.<Type>asList(_fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addFrozenDetail(List<String> _fields, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDFROZENDETAIL, 
                Arrays.<Type>asList(_fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddFrozenDetail(List<String> _fields) {
        final Function function = new Function(
                FUNC_ADDFROZENDETAIL, 
                Arrays.<Type>asList(_fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<List<String>> getAddFrozenDetailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDFROZENDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<List<String>>(

                convertToNative((List<Utf8String>) results.get(0).getValue())
                );
    }

    public Tuple1<BigInteger> getAddFrozenDetailOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDFROZENDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt removePledgeDetail(String _account, BigInteger _pledgeNumber) {
        final Function function = new Function(
                FUNC_REMOVEPLEDGEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_pledgeNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removePledgeDetail(String _account, BigInteger _pledgeNumber, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEPLEDGEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_pledgeNumber)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemovePledgeDetail(String _account, BigInteger _pledgeNumber) {
        final Function function = new Function(
                FUNC_REMOVEPLEDGEDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_pledgeNumber)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRemovePledgeDetailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEPLEDGEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemovePledgeDetailOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEPLEDGEDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateBalance(String account, List<BigInteger> dataUint) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateBalance(String account, List<BigInteger> dataUint, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateBalance(String account, List<BigInteger> dataUint) {
        final Function function = new Function(
                FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                dataUint.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("uint256[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.generated.Uint256>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataUint, org.fisco.bcos.sdk.abi.datatypes.generated.Uint256.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<BigInteger>> getUpdateBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<BigInteger>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Uint256>) results.get(1).getValue())
                );
    }

    public Tuple2<BigInteger, BigInteger> getUpdateBalanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<BigInteger, BigInteger>(

                (BigInteger) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public List getAssetAttrValue() throws ContractException {
        final Function function = new Function(FUNC_GETASSETATTRVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<DynamicBytes>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt updateCanTrans(String account, BigInteger canTrans) {
        final Function function = new Function(
                FUNC_UPDATECANTRANS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(canTrans)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateCanTrans(String account, BigInteger canTrans, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATECANTRANS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(canTrans)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateCanTrans(String account, BigInteger canTrans) {
        final Function function = new Function(
                FUNC_UPDATECANTRANS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(canTrans)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateCanTransInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATECANTRANS, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public TransactionReceipt updateFrozenDetail(String _assetOwnerAddress, List<String> _fields) {
        final Function function = new Function(
                FUNC_UPDATEFROZENDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_assetOwnerAddress), 
                _fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateFrozenDetail(String _assetOwnerAddress, List<String> _fields, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATEFROZENDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_assetOwnerAddress), 
                _fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateFrozenDetail(String _assetOwnerAddress, List<String> _fields) {
        final Function function = new Function(
                FUNC_UPDATEFROZENDETAIL, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Utf8String(_assetOwnerAddress), 
                _fields.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("string[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.Utf8String>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(_fields, org.fisco.bcos.sdk.abi.datatypes.Utf8String.class))), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, List<String>> getUpdateFrozenDetailInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATEFROZENDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Utf8String>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, List<String>>(

                (String) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue())
                );
    }

    public Tuple1<Boolean> getUpdateFrozenDetailOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_UPDATEFROZENDETAIL, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt updateCirculate(String account, BigInteger circulate) {
        final Function function = new Function(
                FUNC_UPDATECIRCULATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(circulate)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void updateCirculate(String account, BigInteger circulate, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_UPDATECIRCULATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(circulate)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForUpdateCirculate(String account, BigInteger circulate) {
        final Function function = new Function(
                FUNC_UPDATECIRCULATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(circulate)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getUpdateCirculateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_UPDATECIRCULATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple2<BigInteger, List<String>> getTransRestrictedDetailByNumber(String _account, BigInteger _transNumber) throws ContractException {
        final Function function = new Function(FUNC_GETTRANSRESTRICTEDDETAILBYNUMBER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_transNumber)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}, new TypeReference<DynamicArray<Utf8String>>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<BigInteger, List<String>>(
                (BigInteger) results.get(0).getValue(), 
                convertToNative((List<Utf8String>) results.get(1).getValue()));
    }

    public List getBalance(String account) throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(account)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {}));
        List<Type> result = (List<Type>) executeCallWithSingleValueReturn(function, List.class);
        return convertToNative(result);
    }

    public TransactionReceipt removeTransTimeLock(String _account, BigInteger _number) {
        final Function function = new Function(
                FUNC_REMOVETRANSTIMELOCK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_number)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeTransTimeLock(String _account, BigInteger _number, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVETRANSTIMELOCK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_number)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveTransTimeLock(String _account, BigInteger _number) {
        final Function function = new Function(
                FUNC_REMOVETRANSTIMELOCK, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_account), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_number)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getRemoveTransTimeLockInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVETRANSTIMELOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<BigInteger> getRemoveTransTimeLockOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVETRANSTIMELOCK, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public List<InsertRecordEventResponse> getInsertRecordEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(INSERTRECORD_EVENT, transactionReceipt);
        ArrayList<InsertRecordEventResponse> responses = new ArrayList<InsertRecordEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            InsertRecordEventResponse typedResponse = new InsertRecordEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tableName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.primaryKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.fields = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeInsertRecordEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRECORD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeInsertRecordEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(INSERTRECORD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateRecordEventResponse> getUpdateRecordEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERECORD_EVENT, transactionReceipt);
        ArrayList<UpdateRecordEventResponse> responses = new ArrayList<UpdateRecordEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateRecordEventResponse typedResponse = new UpdateRecordEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tableName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.primaryKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.fields = (String) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateRecordEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERECORD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateRecordEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERECORD_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<UpdateRecordErrorEventResponse> getUpdateRecordErrorEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(UPDATERECORDERROR_EVENT, transactionReceipt);
        ArrayList<UpdateRecordErrorEventResponse> responses = new ArrayList<UpdateRecordErrorEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            UpdateRecordErrorEventResponse typedResponse = new UpdateRecordErrorEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.tableName = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.primaryKey = (String) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.fields = (String) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.msg = (String) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeUpdateRecordErrorEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERECORDERROR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeUpdateRecordErrorEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(UPDATERECORDERROR_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<DebugEventResponse> getDebugEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(DEBUG_EVENT, transactionReceipt);
        ArrayList<DebugEventResponse> responses = new ArrayList<DebugEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            DebugEventResponse typedResponse = new DebugEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.msg = (String) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeDebugEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(DEBUG_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeDebugEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(DEBUG_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static AssetData load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new AssetData(contractAddress, client, credential);
    }

    public static AssetData deploy(Client client, CryptoKeyPair credential, String _owner, String _governor, List<byte[]> dataStr, BigInteger _totalBalances) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_governor), 
                dataStr.isEmpty()?org.fisco.bcos.sdk.abi.datatypes.DynamicArray.empty("bytes[]"):new org.fisco.bcos.sdk.abi.datatypes.DynamicArray<org.fisco.bcos.sdk.abi.datatypes.DynamicBytes>(
                        org.fisco.bcos.sdk.abi.Utils.typeMap(dataStr, org.fisco.bcos.sdk.abi.datatypes.DynamicBytes.class)), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Uint256(_totalBalances)));
        return deploy(AssetData.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }

    public static class InsertRecordEventResponse {
        public TransactionReceipt.Logs log;

        public String tableName;

        public String primaryKey;

        public String fields;
    }

    public static class UpdateRecordEventResponse {
        public TransactionReceipt.Logs log;

        public String tableName;

        public String primaryKey;

        public String fields;
    }

    public static class UpdateRecordErrorEventResponse {
        public TransactionReceipt.Logs log;

        public String tableName;

        public String primaryKey;

        public String fields;

        public String msg;
    }

    public static class DebugEventResponse {
        public TransactionReceipt.Logs log;

        public String msg;
    }
}
