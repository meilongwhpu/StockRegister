package com.cstc.stockregister.contracts;

import java.math.BigInteger;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionEncoder;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.DynamicBytes;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Uint256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class AccountData extends Contract {
    public static final String[] BINARY_ARRAY = {"","","611e6281612210565b82525050565b6000611e73826121e5565b808452611e87816020860160208601612255565b611e9081612288565b602085010191505092915050565b6000611ea9826121da565b808452611ebd816020860160208601612255565b611ec681612288565b602085010191505092915050565b600081546001811660008114611ef15760018114611f1157611f52565b607f600283041680865260ff198316602087015260408601935050611f52565b60028204808652602086019550611f27856121c8565b60005b82811015611f4957815481890152600182019150602081019050611f2a565b80880195505050505b505092915050565b6000601c82527f6f6e6c7920676f7665726e6f7220697320617574686f72697a65642e000000006020830152604082019050919050565b6000602082527f206f6e6c7920636f6e747261637420737461747573206973206e6f726d616c2e6020830152604082019050919050565b6000602782527f6f6e6c7920676f7665726e6f72206f722063726561746f72206973206175746860208301527f6f72697a65642e000000000000000000000000000000000000000000000000006040830152606082019050919050565b61202e8161221c565b82525050565b60006020820190506120496000830184611e4a565b92915050565b600060a0820190506120646000830188611e4a565b6120716020830187611e4a565b81810360408301526120838186611e9e565b905081810360608301526120978185611e68565b905081810360808301526120ab8184611ed4565b90509695505050505050565b60006020820190506120cc6000830184611e59565b92915050565b600060208201905081810360008301526120ec8184611e68565b905092915050565b6000602082019050818103600083015261210d81611f5a565b9050919050565b6000602082019050818103600083015261212d81611f91565b9050919050565b6000602082019050818103600083015261214d81611fc8565b9050919050565b60006020820190506121696000830184612025565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561219257600080fd5b8060405250919050565b600067ffffffffffffffff8211156121b357600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015612273578082015181840152602081019050612258565b83811115612282576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a72305820148eb9fde31b74bd7d5291f2abb50b01ee4edb7134c6850d212155179ce1e4db6c6578706572696d656e74616cf50037"};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","ffffffffffffffff16141515610ea4576040517fc703cb12000000000000000000000000000000000000000000000000000000008152600401610e9b90612114565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000610f51826009610f5890919063ffffffff16565b9050919050565b600082600001826040518082805190602001908083835b602083101515610f945780518252602082019150602081019050602083039250610f6f565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b60008084600001846040518082805190602001908083835b602083101515611030578051825260208201915060208101905060208303925061100b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001549050600081111561107b576000915061120a565b8285600001856040518082805190602001908083835b6020831015156110b65780518252602082019150602081019050602083039250611091565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508460010180548091906001016111409190611adf565b90506001810185600001856040518082805190602001908083835b602083101515611180578051825260208201915060208101905060208303925061115b565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001819055508385600101828154811015156111cc57fe5b906000526020600020906002020160000190805190602001906111f0929190611b11565b508460020160008154809291906001019190505550600191505b509392505050565b60008084600001846040518082805190602001908083835b60208310151561124f578051825260208201915060208101905060208303925061122a565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000015490506000811115611402577fb842e70165ea1827273bc7a4271b485c64a747bd35bd7b804c41256bf4d5ecf132336040805190810160405280600681526020017f4d4f4449465900000000000000000000000000000000000000000000000000008152508789600001896040518082805190602001908083835b6020831015156113255780518252602082019150602081019050602083039250611300565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160405161136c95949392919061204f565b60405180910390a18285600001856040518082805190602001908083835b6020831015156113af578051825260208201915060208101905060208303925061138a565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010190805190602001906113f8929190611b11565b5060019150611407565b600091505b509392505050565b600081600201549050919050565b60008083600001836040518082805190602001908083835b60208310151561145a5780518252602082019150602081019050602083039250611435565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060000154905060008114156114a55760009150611668565b7fb842e70165ea1827273bc7a4271b485c64a747bd35bd7b804c41256bf4d5ecf132336040805190810160405280600681526020017f44454c45544500000000000000000000000000000000000000000000000000008152508688600001886040518082805190602001908083835b6020831015156115395780518252602082019150602081019050602083039250611514565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010160405161158095949392919061204f565b60405180910390a183600001836040518082805190602001908083835b6020831015156115c2578051825260208201915060208101905060208303925061159d565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060008082016000905560018201600061160e9190611b91565b50506001846001016001830381548110151561162657fe5b906000526020600020906002020160010160006101000a81548160ff021916908315150217905550836002016000815480929190600190039190505550600191505b5092915050565b60008084600001846040518082805190602001908083835b6020831015156116ac5780518252602082019150602081019050602083039250611687565b6001836020036101000a0380198251168184511680821785525050505050509050019150509081526020016040518091039020600001549050600081111561185f577fb842e70165ea1827273bc7a4271b485c64a747bd35bd7b804c41256bf4d5ecf132336040805190810160405280600681526020017f4d4f4449465900000000000000000000000000000000000000000000000000008152508789600001896040518082805190602001908083835b602083101515611782578051825260208201915060208101905060208303925061175d565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001016040516117c995949392919061204f565b60405180910390a18285600001856040518082805190602001908083835b60208310151561180c57805182526020820191506020810190506020830392506117e7565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001019080519060200190611855929190611b11565b50600191506119c4565b8285600001856040518082805190602001908083835b60208310151561189a5780518252602082019150602081019050602083039250611875565b6001836020036101000a038019825116818451168082178552505050505050905001915050908152602001604051809103902060010190805190602001906118e3929190611b11565b508460010180548091906001016118fa9190611bd9565b90506001810185600001856040518082805190602001908083835b60208310151561193a5780518252602082019150602081019050602083039250611915565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206000018190555083856001018281548110151561198657fe5b906000526020600020906002020160000190805190602001906119aa929190611b11565b508460020160008154809291906001019190505550600091505b509392505050565b606082600001826040518082805190602001908083835b602083101515611a0857805182526020820191506020810190506020830392506119e3565b6001836020036101000a03801982511681845116808217855250505050505090500191505090815260200160405180910390206001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015611ad25780601f10611aa757610100808354040283529160200191611ad2565b820191906000526020600020905b815481529060010190602001808311611ab557829003601f168201915b5050505050905092915050565b815481835581811115611b0c57600202816002028360005260206000209182019101611b0b9190611c0b565b5b505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f10611b5257805160ff1916838001178555611b80565b82800160010185558215611b80579182015b82811115611b7f578251825591602001919060010190611b64565b5b509050611b8d9190611c4e565b5090565b50805460018160011615610100020316600290046000825580601f10611bb75750611bd6565b601f016020900490600052602060002090810190611bd59190611c4e565b5b50565b815481835581811115611c0657600202816002028360005260206000209182019101611c059190611c73565b5b505050565b611c4b91905b80821115611c475760008082016000611c2a9190611b91565b6001820160006101000a81549060ff021916905550600201611c11565b5090565b90565b611c7091905b80821115611c6c576000816000905550600101611c54565b5090565b90565b611cb391905b80821115611caf5760008082016000611c929190611b91565b6001820160006101000a81549060ff021916905550600201611c79565b5090565b90565b6000611cc28235612226565b905092915050565b600082601f8301121515611cdd57600080fd5b8135611cf0611ceb8261219c565b61216f565b91508082526020830160208301858383011115611d0c57600080fd5b611d17838284612246565b50505092915050565b600060208284031215611d3257600080fd5b6000611d4084828501611cb6565b91505092915050565b600060208284031215611d5b57600080fd5b600082013567ffffffffffffffff811115611d7557600080fd5b611d8184828501611cca565b91505092915050565b60008060408385031215611d9d57600080fd5b600083013567ffffffffffffffff811115611db757600080fd5b611dc385828601611cca565b9250506020611dd485828601611cb6565b9150509250929050565b60008060408385031215611df157600080fd5b600083013567ffffffffffffffff811115611e0b57600080fd5b611e1785828601611cca565b925050602083013567ffffffffffffffff811115611e3457600080fd5b611e4085828601611cca565b9150509250929050565b611e53816121f0565b82525050565b","611e6281612210565b82525050565b6000611e73826121e5565b808452611e87816020860160208601612255565b611e9081612288565b602085010191505092915050565b6000611ea9826121da565b808452611ebd816020860160208601612255565b611ec681612288565b602085010191505092915050565b600081546001811660008114611ef15760018114611f1157611f52565b607f600283041680865260ff198316602087015260408601935050611f52565b60028204808652602086019550611f27856121c8565b60005b82811015611f4957815481890152600182019150602081019050611f2a565b80880195505050505b505092915050565b6000602082527f206f6e6c7920636f6e747261637420737461747573206973206e6f726d616c2e6020830152604082019050919050565b6000601c82527f6f6e6c7920676f7665726e6f7220697320617574686f72697a65642e000000006020830152604082019050919050565b6000602782527f6f6e6c7920676f7665726e6f72206f722063726561746f72206973206175746860208301527f6f72697a65642e000000000000000000000000000000000000000000000000006040830152606082019050919050565b61202e8161221c565b82525050565b60006020820190506120496000830184611e4a565b92915050565b600060a0820190506120646000830188611e4a565b6120716020830187611e4a565b81810360408301526120838186611e9e565b905081810360608301526120978185611e68565b905081810360808301526120ab8184611ed4565b90509695505050505050565b60006020820190506120cc6000830184611e59565b92915050565b600060208201905081810360008301526120ec8184611e68565b905092915050565b6000602082019050818103600083015261210d81611f5a565b9050919050565b6000602082019050818103600083015261212d81611f91565b9050919050565b6000602082019050818103600083015261214d81611fc8565b9050919050565b60006020820190506121696000830184612025565b92915050565b6000604051905081810181811067ffffffffffffffff8211171561219257600080fd5b8060405250919050565b600067ffffffffffffffff8211156121b357600080fd5b601f19601f8301169050602081019050919050565b60008160005260206000209050919050565b600081519050919050565b600081519050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b82818337600083830152505050565b60005b83811015612273578082015181840152602081019050612258565b83811115612282576000848401525b50505050565b6000601f19601f83011690509190505600a265627a7a7230582049b46989c2beb621eb4b2d059892af6c0de1535df207d700cf490b3eeef8bdcd6c6578706572696d656e74616cf50037"};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getCreator\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"stopContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"stockAssetCode\",\"type\":\"bytes\"}],\"name\":\"getStockAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"restartContract\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sizeOfStorage\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"}],\"name\":\"setCreator\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getGovernor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"bondAssetCode\",\"type\":\"bytes\"}],\"name\":\"getBondAssets\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"removeValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"bondAssetCode\",\"type\":\"bytes\"},{\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"addBondAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"}],\"name\":\"getValue\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"setKeyValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"setGovernor\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"key\",\"type\":\"bytes\"},{\"name\":\"value\",\"type\":\"bytes\"}],\"name\":\"insertKeyValue\",\"outputs\":[{\"name\":\"replaced\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"stockAssetCode\",\"type\":\"bytes\"},{\"name\":\"assetAddress\",\"type\":\"address\"}],\"name\":\"addStockAsset\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_creator\",\"type\":\"address\"},{\"name\":\"_owner\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETCREATOR = "getCreator";

    public static final String FUNC_STOPCONTRACT = "stopContract";

    public static final String FUNC_SETOWNER = "setOwner";

    public static final String FUNC_GETSTOCKASSETS = "getStockAssets";

    public static final String FUNC_RESTARTCONTRACT = "restartContract";

    public static final String FUNC_SIZEOFSTORAGE = "sizeOfStorage";

    public static final String FUNC_SETCREATOR = "setCreator";

    public static final String FUNC_GETGOVERNOR = "getGovernor";

    public static final String FUNC_GETBONDASSETS = "getBondAssets";

    public static final String FUNC_GETOWNER = "getOwner";

    public static final String FUNC_REMOVEVALUE = "removeValue";

    public static final String FUNC_ADDBONDASSET = "addBondAsset";

    public static final String FUNC_GETVALUE = "getValue";

    public static final String FUNC_SETKEYVALUE = "setKeyValue";

    public static final String FUNC_SETGOVERNOR = "setGovernor";

    public static final String FUNC_INSERTKEYVALUE = "insertKeyValue";

    public static final String FUNC_ADDSTOCKASSET = "addStockAsset";

    protected AccountData(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public String getCreator() throws ContractException {
        final Function function = new Function(FUNC_GETCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt stopContract() {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void stopContract(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForStopContract() {
        final Function function = new Function(
                FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getStopContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_STOPCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setOwner(String _owner, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetOwner(String _owner) {
        final Function function = new Function(
                FUNC_SETOWNER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetOwnerInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getStockAssets(byte[] stockAssetCode) throws ContractException {
        final Function function = new Function(FUNC_GETSTOCKASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(stockAssetCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt restartContract() {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void restartContract(TransactionCallback callback) {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRestartContract() {
        final Function function = new Function(
                FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<Boolean> getRestartContractOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_RESTARTCONTRACT, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public BigInteger sizeOfStorage() throws ContractException {
        final Function function = new Function(FUNC_SIZEOFSTORAGE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt setCreator(String _creator) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setCreator(String _creator, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetCreator(String _creator) {
        final Function function = new Function(
                FUNC_SETCREATOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetCreatorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETCREATOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public String getGovernor() throws ContractException {
        final Function function = new Function(FUNC_GETGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getBondAssets(byte[] bondAssetCode) throws ContractException {
        final Function function = new Function(FUNC_GETBONDASSETS, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(bondAssetCode)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public String getOwner() throws ContractException {
        final Function function = new Function(FUNC_GETOWNER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        return executeCallWithSingleValueReturn(function, String.class);
    }

    public TransactionReceipt removeValue(byte[] key) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void removeValue(byte[] key, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemoveValue(byte[] key) {
        final Function function = new Function(
                FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getRemoveValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVEVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addBondAsset(byte[] bondAssetCode, String assetAddress) {
        final Function function = new Function(
                FUNC_ADDBONDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(bondAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(assetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addBondAsset(byte[] bondAssetCode, String assetAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDBONDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(bondAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(assetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddBondAsset(byte[] bondAssetCode, String assetAddress) {
        final Function function = new Function(
                FUNC_ADDBONDASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(bondAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(assetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], String> getAddBondAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDBONDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(

                (byte[]) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddBondAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDBONDASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public byte[] getValue(byte[] key) throws ContractException {
        final Function function = new Function(FUNC_GETVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key)), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}));
        return executeCallWithSingleValueReturn(function, byte[].class);
    }

    public TransactionReceipt setKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setKeyValue(byte[] key, byte[] value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getSetKeyValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getSetKeyValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setGovernor(String _governor) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setGovernor(String _governor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetGovernor(String _governor) {
        final Function function = new Function(
                FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_governor)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getSetGovernorInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETGOVERNOR, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public TransactionReceipt insertKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void insertKeyValue(byte[] key, byte[] value, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForInsertKeyValue(byte[] key, byte[] value) {
        final Function function = new Function(
                FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(key), 
                new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(value)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], byte[]> getInsertKeyValueInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<DynamicBytes>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], byte[]>(

                (byte[]) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getInsertKeyValueOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_INSERTKEYVALUE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt addStockAsset(byte[] stockAssetCode, String assetAddress) {
        final Function function = new Function(
                FUNC_ADDSTOCKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(stockAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(assetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void addStockAsset(byte[] stockAssetCode, String assetAddress, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_ADDSTOCKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(stockAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(assetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForAddStockAsset(byte[] stockAssetCode, String assetAddress) {
        final Function function = new Function(
                FUNC_ADDSTOCKASSET, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.DynamicBytes(stockAssetCode), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(assetAddress)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], String> getAddStockAssetInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_ADDSTOCKASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicBytes>() {}, new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], String>(

                (byte[]) results.get(0).getValue(), 
                (String) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getAddStockAssetOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_ADDSTOCKASSET, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public static AccountData load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new AccountData(contractAddress, client, credential);
    }

    public static AccountData deploy(Client client, CryptoKeyPair credential, String _creator, String _owner) throws ContractException {
        String encodedConstructor = FunctionEncoder.encodeConstructor(Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(_creator), 
                new org.fisco.bcos.sdk.abi.datatypes.Address(_owner)));
        return deploy(AccountData.class, client, credential, getBinary(client.getCryptoSuite()), encodedConstructor);
    }
}
